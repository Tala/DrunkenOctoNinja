/*
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
package com.parrot.freeflight3.devicecontrollers;

/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllerCategories.py script *
 *                                                        *
 **********************************************************/

import com.parrot.arsdk.ardiscovery.ARDiscoveryDeviceService;
import com.parrot.arsdk.arcommands.ARCommand;
import com.parrot.arsdk.arnetwork.ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_GENERATOR_ERROR_ENUM;
import com.parrot.arsdk.arsal.ARSALPrint;
import java.util.HashMap;
import android.os.Bundle;
import android.content.Intent;
import android.support.v4.content.LocalBroadcastManager;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3MediaRecordStatePictureStateChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3MediaRecordStateVideoStateChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingStateFlatTrimChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingStateFlyingStateChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingStateAlertStateChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingStateNavigateHomeStateChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingStatePositionChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingStateSpeedChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingStateAttitudeChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingStateAutoTakeOffModeChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingStateAltitudeChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3NetworkStateWifiScanListChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3NetworkStateAllWifiScanChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3NetworkStateWifiAuthChannelListChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3NetworkStateAllWifiAuthChannelChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingSettingsStateMaxAltitudeChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingSettingsStateMaxTiltChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PilotingSettingsStateAbsolutControlChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3SpeedSettingsStateMaxVerticalSpeedChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3SpeedSettingsStateMaxRotationSpeedChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3SpeedSettingsStateHullProtectionChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3SpeedSettingsStateOutdoorChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3NetworkSettingsStateWifiSelectionChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3SettingsStateProductMotorVersionListChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3SettingsStateProductGPSVersionChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3SettingsStateMotorErrorStateChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3SettingsStateMotorSoftwareVersionChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3SettingsStateMotorFlightsStatusChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3SettingsStateMotorErrorLastErrorChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PictureSettingsStatePictureFormatChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PictureSettingsStateAutoWhiteBalanceChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PictureSettingsStateExpositionChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PictureSettingsStateSaturationChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PictureSettingsStateTimelapseChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3PictureSettingsStateVideoAutorecordChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3MediaStreamingStateVideoEnableChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3GPSSettingsStateHomeChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3GPSSettingsStateResetHomeChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3GPSSettingsStateGPSFixStateChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3GPSSettingsStateGPSUpdateStateChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandARDrone3CameraStateOrientationListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3DebugBatteryDebugSettingsStateUseDrone2BatteryChangedListener;
import com.parrot.arsdk.arcommands.ARCommandARDrone3DebugGPSDebugStateNbSatelliteChangedListener;

public abstract class ARDrone3DeviceControllerAndLibARCommands extends DeviceController implements ARCommandARDrone3MediaRecordStatePictureStateChangedListener, ARCommandARDrone3MediaRecordStateVideoStateChangedListener, ARCommandARDrone3PilotingStateFlatTrimChangedListener, ARCommandARDrone3PilotingStateFlyingStateChangedListener, ARCommandARDrone3PilotingStateAlertStateChangedListener, ARCommandARDrone3PilotingStateNavigateHomeStateChangedListener, ARCommandARDrone3PilotingStatePositionChangedListener, ARCommandARDrone3PilotingStateSpeedChangedListener, ARCommandARDrone3PilotingStateAttitudeChangedListener, ARCommandARDrone3PilotingStateAutoTakeOffModeChangedListener, ARCommandARDrone3PilotingStateAltitudeChangedListener, ARCommandARDrone3NetworkStateWifiScanListChangedListener, ARCommandARDrone3NetworkStateAllWifiScanChangedListener, ARCommandARDrone3NetworkStateWifiAuthChannelListChangedListener, ARCommandARDrone3NetworkStateAllWifiAuthChannelChangedListener, ARCommandARDrone3PilotingSettingsStateMaxAltitudeChangedListener, ARCommandARDrone3PilotingSettingsStateMaxTiltChangedListener, ARCommandARDrone3PilotingSettingsStateAbsolutControlChangedListener, ARCommandARDrone3SpeedSettingsStateMaxVerticalSpeedChangedListener, ARCommandARDrone3SpeedSettingsStateMaxRotationSpeedChangedListener, ARCommandARDrone3SpeedSettingsStateHullProtectionChangedListener, ARCommandARDrone3SpeedSettingsStateOutdoorChangedListener, ARCommandARDrone3NetworkSettingsStateWifiSelectionChangedListener, ARCommandARDrone3SettingsStateProductMotorVersionListChangedListener, ARCommandARDrone3SettingsStateProductGPSVersionChangedListener, ARCommandARDrone3SettingsStateMotorErrorStateChangedListener, ARCommandARDrone3SettingsStateMotorSoftwareVersionChangedListener, ARCommandARDrone3SettingsStateMotorFlightsStatusChangedListener, ARCommandARDrone3SettingsStateMotorErrorLastErrorChangedListener, ARCommandARDrone3PictureSettingsStatePictureFormatChangedListener, ARCommandARDrone3PictureSettingsStateAutoWhiteBalanceChangedListener, ARCommandARDrone3PictureSettingsStateExpositionChangedListener, ARCommandARDrone3PictureSettingsStateSaturationChangedListener, ARCommandARDrone3PictureSettingsStateTimelapseChangedListener, ARCommandARDrone3PictureSettingsStateVideoAutorecordChangedListener, ARCommandARDrone3MediaStreamingStateVideoEnableChangedListener, ARCommandARDrone3GPSSettingsStateHomeChangedListener, ARCommandARDrone3GPSSettingsStateResetHomeChangedListener, ARCommandARDrone3GPSSettingsStateGPSFixStateChangedListener, ARCommandARDrone3GPSSettingsStateGPSUpdateStateChangedListener, ARCommandARDrone3CameraStateOrientationListener, ARCommandARDrone3DebugBatteryDebugSettingsStateUseDrone2BatteryChangedListener, ARCommandARDrone3DebugGPSDebugStateNbSatelliteChangedListener
{
    private final static String ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG = "ARDrone3DeviceControllerAndLibARCommands";
    
    private HashMap<String, Intent> aRDrone3DeviceControllerAndLibARCommandsIntentCache;
    public final static String ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification = "ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification";
    public final static String ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationStateKey = "ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationStateKey";
    public final static String ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationMass_storage_idKey = "ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationMass_storage_idKey";
    public final static String ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification = "ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification";
    public final static String ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationStateKey = "ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationStateKey";
    public final static String ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationMass_storage_idKey = "ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationMass_storage_idKey";
    public final static String ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification = "ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification = "ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotificationStateKey = "ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotificationStateKey";
    public final static String ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification = "ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingStateAlertStateChangedNotificationStateKey = "ARDrone3DeviceControllerPilotingStateAlertStateChangedNotificationStateKey";
    public final static String ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification = "ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationStateKey = "ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationStateKey";
    public final static String ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationReasonKey = "ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationReasonKey";
    public final static String ARDrone3DeviceControllerPilotingStatePositionChangedNotification = "ARDrone3DeviceControllerPilotingStatePositionChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLatitudeKey = "ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLatitudeKey";
    public final static String ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLongitudeKey = "ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLongitudeKey";
    public final static String ARDrone3DeviceControllerPilotingStatePositionChangedNotificationAltitudeKey = "ARDrone3DeviceControllerPilotingStatePositionChangedNotificationAltitudeKey";
    public final static String ARDrone3DeviceControllerPilotingStateSpeedChangedNotification = "ARDrone3DeviceControllerPilotingStateSpeedChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedXKey = "ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedXKey";
    public final static String ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedYKey = "ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedYKey";
    public final static String ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedZKey = "ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedZKey";
    public final static String ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification = "ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationRollKey = "ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationRollKey";
    public final static String ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationPitchKey = "ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationPitchKey";
    public final static String ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationYawKey = "ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationYawKey";
    public final static String ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification = "ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotificationStateKey = "ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotificationStateKey";
    public final static String ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification = "ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingStateAltitudeChangedNotificationAltitudeKey = "ARDrone3DeviceControllerPilotingStateAltitudeChangedNotificationAltitudeKey";
    public final static String ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification = "ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification";
    public final static String ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationSsidKey = "ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationSsidKey";
    public final static String ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationRssiKey = "ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationRssiKey";
    public final static String ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationBandKey = "ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationBandKey";
    public final static String ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationChannelKey = "ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationChannelKey";
    public final static String ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification = "ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification";
    public final static String ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification = "ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification";
    public final static String ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationBandKey = "ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationBandKey";
    public final static String ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationChannelKey = "ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationChannelKey";
    public final static String ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationIn_or_outKey = "ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationIn_or_outKey";
    public final static String ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification = "ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification = "ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationCurrentKey = "ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationCurrentKey";
    public final static String ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMinKey = "ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMinKey";
    public final static String ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMaxKey = "ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMaxKey";
    public final static String ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification = "ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationCurrentKey = "ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationCurrentKey";
    public final static String ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMinKey = "ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMinKey";
    public final static String ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMaxKey = "ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMaxKey";
    public final static String ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification = "ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification";
    public final static String ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotificationOnKey = "ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotificationOnKey";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification = "ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationCurrentKey = "ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationCurrentKey";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMinKey = "ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMinKey";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMaxKey = "ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMaxKey";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification = "ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationCurrentKey = "ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationCurrentKey";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMinKey = "ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMinKey";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMaxKey = "ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMaxKey";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification = "ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotificationPresentKey = "ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotificationPresentKey";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification = "ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification";
    public final static String ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotificationOutdoorKey = "ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotificationOutdoorKey";
    public final static String ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification = "ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification";
    public final static String ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationTypeKey = "ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationTypeKey";
    public final static String ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationBandKey = "ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationBandKey";
    public final static String ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationChannelKey = "ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationChannelKey";
    public final static String ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification = "ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification";
    public final static String ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationMotor_numberKey = "ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationMotor_numberKey";
    public final static String ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationTypeKey = "ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationTypeKey";
    public final static String ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationSoftwareKey = "ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationSoftwareKey";
    public final static String ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationHardwareKey = "ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationHardwareKey";
    public final static String ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification = "ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification";
    public final static String ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationSoftwareKey = "ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationSoftwareKey";
    public final static String ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationHardwareKey = "ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationHardwareKey";
    public final static String ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification = "ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification";
    public final static String ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorIdsKey = "ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorIdsKey";
    public final static String ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorErrorKey = "ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorErrorKey";
    public final static String ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification = "ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification";
    public final static String ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotificationVersionKey = "ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotificationVersionKey";
    public final static String ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification = "ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification";
    public final static String ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationNbFlightsKey = "ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationNbFlightsKey";
    public final static String ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationLastFlightDurationKey = "ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationLastFlightDurationKey";
    public final static String ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationTotalFlightDurationKey = "ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationTotalFlightDurationKey";
    public final static String ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification = "ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification";
    public final static String ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotificationMotorErrorKey = "ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotificationMotorErrorKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification = "ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification";
    public final static String ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotificationTypeKey = "ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotificationTypeKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification = "ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification";
    public final static String ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotificationTypeKey = "ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotificationTypeKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification = "ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification";
    public final static String ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationValueKey = "ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationValueKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMinKey = "ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMinKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMaxKey = "ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMaxKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification = "ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification";
    public final static String ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationValueKey = "ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationValueKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMinKey = "ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMinKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMaxKey = "ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMaxKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification = "ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification";
    public final static String ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationEnabledKey = "ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationEnabledKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationIntervalKey = "ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationIntervalKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMinIntervalKey = "ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMinIntervalKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMaxIntervalKey = "ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMaxIntervalKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification = "ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification";
    public final static String ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationEnabledKey = "ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationEnabledKey";
    public final static String ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationMass_storage_idKey = "ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationMass_storage_idKey";
    public final static String ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification = "ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification";
    public final static String ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotificationEnabledKey = "ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotificationEnabledKey";
    public final static String ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification = "ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification";
    public final static String ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLatitudeKey = "ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLatitudeKey";
    public final static String ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLongitudeKey = "ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLongitudeKey";
    public final static String ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationAltitudeKey = "ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationAltitudeKey";
    public final static String ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification = "ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification";
    public final static String ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLatitudeKey = "ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLatitudeKey";
    public final static String ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLongitudeKey = "ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLongitudeKey";
    public final static String ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationAltitudeKey = "ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationAltitudeKey";
    public final static String ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification = "ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification";
    public final static String ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotificationFixedKey = "ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotificationFixedKey";
    public final static String ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification = "ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification";
    public final static String ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotificationStateKey = "ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotificationStateKey";
    public final static String ARDrone3DeviceControllerCameraStateOrientationNotification = "ARDrone3DeviceControllerCameraStateOrientationNotification";
    public final static String ARDrone3DeviceControllerCameraStateOrientationNotificationTiltKey = "ARDrone3DeviceControllerCameraStateOrientationNotificationTiltKey";
    public final static String ARDrone3DeviceControllerCameraStateOrientationNotificationPanKey = "ARDrone3DeviceControllerCameraStateOrientationNotificationPanKey";
    public final static String ARDrone3DeviceControllerBatteryDebugSettingsStateUseDrone2BatteryChangedNotification = "ARDrone3DeviceControllerBatteryDebugSettingsStateUseDrone2BatteryChangedNotification";
    public final static String ARDrone3DeviceControllerBatteryDebugSettingsStateUseDrone2BatteryChangedNotificationDrone2BatteryUsedKey = "ARDrone3DeviceControllerBatteryDebugSettingsStateUseDrone2BatteryChangedNotificationDrone2BatteryUsedKey";
    public final static String ARDrone3DeviceControllerGPSDebugStateNbSatelliteChangedNotification = "ARDrone3DeviceControllerGPSDebugStateNbSatelliteChangedNotification";
    public final static String ARDrone3DeviceControllerGPSDebugStateNbSatelliteChangedNotificationNbSatelliteKey = "ARDrone3DeviceControllerGPSDebugStateNbSatelliteChangedNotificationNbSatelliteKey";

    protected void initialize ()
    {
        if(!isInitialized())
        {
            initARDrone3DeviceControllerAndLibARCommandsIntents ();
            super.initialize ();
        }
    }
    
    @Override
    protected void setConfigurations (ARNetworkConfig netConfig, ARDiscoveryDeviceService service, double interval, Class<? extends DeviceController> dcBridgeClass)
    {
        super.setConfigurations (netConfig, service, interval, dcBridgeClass);
    }
    
    @Override
    protected void registerARCommandsListener ()
    {
        super.registerARCommandsListener();
        
        ARCommand.setARDrone3MediaRecordStatePictureStateChangedListener (this);
        ARCommand.setARDrone3MediaRecordStateVideoStateChangedListener (this);
        ARCommand.setARDrone3PilotingStateFlatTrimChangedListener (this);
        ARCommand.setARDrone3PilotingStateFlyingStateChangedListener (this);
        ARCommand.setARDrone3PilotingStateAlertStateChangedListener (this);
        ARCommand.setARDrone3PilotingStateNavigateHomeStateChangedListener (this);
        ARCommand.setARDrone3PilotingStatePositionChangedListener (this);
        ARCommand.setARDrone3PilotingStateSpeedChangedListener (this);
        ARCommand.setARDrone3PilotingStateAttitudeChangedListener (this);
        ARCommand.setARDrone3PilotingStateAutoTakeOffModeChangedListener (this);
        ARCommand.setARDrone3PilotingStateAltitudeChangedListener (this);
        ARCommand.setARDrone3NetworkStateWifiScanListChangedListener (this);
        ARCommand.setARDrone3NetworkStateAllWifiScanChangedListener (this);
        ARCommand.setARDrone3NetworkStateWifiAuthChannelListChangedListener (this);
        ARCommand.setARDrone3NetworkStateAllWifiAuthChannelChangedListener (this);
        ARCommand.setARDrone3PilotingSettingsStateMaxAltitudeChangedListener (this);
        ARCommand.setARDrone3PilotingSettingsStateMaxTiltChangedListener (this);
        ARCommand.setARDrone3PilotingSettingsStateAbsolutControlChangedListener (this);
        ARCommand.setARDrone3SpeedSettingsStateMaxVerticalSpeedChangedListener (this);
        ARCommand.setARDrone3SpeedSettingsStateMaxRotationSpeedChangedListener (this);
        ARCommand.setARDrone3SpeedSettingsStateHullProtectionChangedListener (this);
        ARCommand.setARDrone3SpeedSettingsStateOutdoorChangedListener (this);
        ARCommand.setARDrone3NetworkSettingsStateWifiSelectionChangedListener (this);
        ARCommand.setARDrone3SettingsStateProductMotorVersionListChangedListener (this);
        ARCommand.setARDrone3SettingsStateProductGPSVersionChangedListener (this);
        ARCommand.setARDrone3SettingsStateMotorErrorStateChangedListener (this);
        ARCommand.setARDrone3SettingsStateMotorSoftwareVersionChangedListener (this);
        ARCommand.setARDrone3SettingsStateMotorFlightsStatusChangedListener (this);
        ARCommand.setARDrone3SettingsStateMotorErrorLastErrorChangedListener (this);
        ARCommand.setARDrone3PictureSettingsStatePictureFormatChangedListener (this);
        ARCommand.setARDrone3PictureSettingsStateAutoWhiteBalanceChangedListener (this);
        ARCommand.setARDrone3PictureSettingsStateExpositionChangedListener (this);
        ARCommand.setARDrone3PictureSettingsStateSaturationChangedListener (this);
        ARCommand.setARDrone3PictureSettingsStateTimelapseChangedListener (this);
        ARCommand.setARDrone3PictureSettingsStateVideoAutorecordChangedListener (this);
        ARCommand.setARDrone3MediaStreamingStateVideoEnableChangedListener (this);
        ARCommand.setARDrone3GPSSettingsStateHomeChangedListener (this);
        ARCommand.setARDrone3GPSSettingsStateResetHomeChangedListener (this);
        ARCommand.setARDrone3GPSSettingsStateGPSFixStateChangedListener (this);
        ARCommand.setARDrone3GPSSettingsStateGPSUpdateStateChangedListener (this);
        ARCommand.setARDrone3CameraStateOrientationListener (this);
        ARCommand.setARDrone3DebugBatteryDebugSettingsStateUseDrone2BatteryChangedListener (this);
        ARCommand.setARDrone3DebugGPSDebugStateNbSatelliteChangedListener (this);
    }
    
    @Override
    protected void unregisterARCommandsListener ()
    {
        super.unregisterARCommandsListener();
        
        ARCommand.setARDrone3MediaRecordStatePictureStateChangedListener (null);
        ARCommand.setARDrone3MediaRecordStateVideoStateChangedListener (null);
        ARCommand.setARDrone3PilotingStateFlatTrimChangedListener (null);
        ARCommand.setARDrone3PilotingStateFlyingStateChangedListener (null);
        ARCommand.setARDrone3PilotingStateAlertStateChangedListener (null);
        ARCommand.setARDrone3PilotingStateNavigateHomeStateChangedListener (null);
        ARCommand.setARDrone3PilotingStatePositionChangedListener (null);
        ARCommand.setARDrone3PilotingStateSpeedChangedListener (null);
        ARCommand.setARDrone3PilotingStateAttitudeChangedListener (null);
        ARCommand.setARDrone3PilotingStateAutoTakeOffModeChangedListener (null);
        ARCommand.setARDrone3PilotingStateAltitudeChangedListener (null);
        ARCommand.setARDrone3NetworkStateWifiScanListChangedListener (null);
        ARCommand.setARDrone3NetworkStateAllWifiScanChangedListener (null);
        ARCommand.setARDrone3NetworkStateWifiAuthChannelListChangedListener (null);
        ARCommand.setARDrone3NetworkStateAllWifiAuthChannelChangedListener (null);
        ARCommand.setARDrone3PilotingSettingsStateMaxAltitudeChangedListener (null);
        ARCommand.setARDrone3PilotingSettingsStateMaxTiltChangedListener (null);
        ARCommand.setARDrone3PilotingSettingsStateAbsolutControlChangedListener (null);
        ARCommand.setARDrone3SpeedSettingsStateMaxVerticalSpeedChangedListener (null);
        ARCommand.setARDrone3SpeedSettingsStateMaxRotationSpeedChangedListener (null);
        ARCommand.setARDrone3SpeedSettingsStateHullProtectionChangedListener (null);
        ARCommand.setARDrone3SpeedSettingsStateOutdoorChangedListener (null);
        ARCommand.setARDrone3NetworkSettingsStateWifiSelectionChangedListener (null);
        ARCommand.setARDrone3SettingsStateProductMotorVersionListChangedListener (null);
        ARCommand.setARDrone3SettingsStateProductGPSVersionChangedListener (null);
        ARCommand.setARDrone3SettingsStateMotorErrorStateChangedListener (null);
        ARCommand.setARDrone3SettingsStateMotorSoftwareVersionChangedListener (null);
        ARCommand.setARDrone3SettingsStateMotorFlightsStatusChangedListener (null);
        ARCommand.setARDrone3SettingsStateMotorErrorLastErrorChangedListener (null);
        ARCommand.setARDrone3PictureSettingsStatePictureFormatChangedListener (null);
        ARCommand.setARDrone3PictureSettingsStateAutoWhiteBalanceChangedListener (null);
        ARCommand.setARDrone3PictureSettingsStateExpositionChangedListener (null);
        ARCommand.setARDrone3PictureSettingsStateSaturationChangedListener (null);
        ARCommand.setARDrone3PictureSettingsStateTimelapseChangedListener (null);
        ARCommand.setARDrone3PictureSettingsStateVideoAutorecordChangedListener (null);
        ARCommand.setARDrone3MediaStreamingStateVideoEnableChangedListener (null);
        ARCommand.setARDrone3GPSSettingsStateHomeChangedListener (null);
        ARCommand.setARDrone3GPSSettingsStateResetHomeChangedListener (null);
        ARCommand.setARDrone3GPSSettingsStateGPSFixStateChangedListener (null);
        ARCommand.setARDrone3GPSSettingsStateGPSUpdateStateChangedListener (null);
        ARCommand.setARDrone3CameraStateOrientationListener (null);
        ARCommand.setARDrone3DebugBatteryDebugSettingsStateUseDrone2BatteryChangedListener (null);
        ARCommand.setARDrone3DebugGPSDebugStateNbSatelliteChangedListener (null);
    }
    
    private void initARDrone3DeviceControllerAndLibARCommandsIntents ()
    {
        aRDrone3DeviceControllerAndLibARCommandsIntentCache = new HashMap<String, Intent>(43);
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification, new Intent (ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification, new Intent (ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification, new Intent (ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification, new Intent (ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification, new Intent (ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification, new Intent (ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingStatePositionChangedNotification, new Intent (ARDrone3DeviceControllerPilotingStatePositionChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingStateSpeedChangedNotification, new Intent (ARDrone3DeviceControllerPilotingStateSpeedChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification, new Intent (ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification, new Intent (ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification, new Intent (ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification, new Intent (ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification, new Intent (ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification, new Intent (ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification, new Intent (ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification, new Intent (ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification, new Intent (ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification, new Intent (ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification, new Intent (ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification, new Intent (ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification, new Intent (ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification, new Intent (ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification, new Intent (ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification, new Intent (ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification, new Intent (ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification, new Intent (ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification, new Intent (ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification, new Intent (ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification, new Intent (ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification, new Intent (ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification, new Intent (ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification, new Intent (ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification, new Intent (ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification, new Intent (ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification, new Intent (ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification, new Intent (ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification, new Intent (ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification, new Intent (ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification, new Intent (ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification, new Intent (ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerCameraStateOrientationNotification, new Intent (ARDrone3DeviceControllerCameraStateOrientationNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerBatteryDebugSettingsStateUseDrone2BatteryChangedNotification, new Intent (ARDrone3DeviceControllerBatteryDebugSettingsStateUseDrone2BatteryChangedNotification));
        aRDrone3DeviceControllerAndLibARCommandsIntentCache.put(ARDrone3DeviceControllerGPSDebugStateNbSatelliteChangedNotification, new Intent (ARDrone3DeviceControllerGPSDebugStateNbSatelliteChangedNotification));
    }
    
    protected Intent getARDrone3DeviceControllerAndLibARCommandsIntent (String name)
    {
        return aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(name) ;
    }
    
    /** Method called in a dedicated thread on a configurable interval.
     * @note This is an abstract method that you must override.
     */
    public abstract void controllerLoop ();
    
    /**
     * Request a stopped controller to start.
     * @note This is an abstract method that you must override.
     */
    public abstract void start ();
    
    /**
     * Request a started controller to stop.
     * @note This is an abstract method that you must override.
     */
    public abstract void stop ();
    
    /**
     * Get the current state of the controller.
     * @return current state
     */
    public abstract DEVICE_CONTROLER_STATE_ENUM getState ();
    
    /**
     * Called when a command <code>PictureStateChanged</code> of class <code>MediaRecordState</code> in project <code>ARDrone3</code> is decoded
     * @param state 1 if picture has been taken, 0 otherwise
     * @param mass_storage_id Mass storage id where the picture was recorded
     */
    @Override
    public synchronized void onARDrone3MediaRecordStatePictureStateChangedUpdate (byte state, byte mass_storage_id)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationStateKey, state);
        notificationBundle.putByte(ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationMass_storage_idKey, mass_storage_id);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>VideoStateChanged</code> of class <code>MediaRecordState</code> in project <code>ARDrone3</code> is decoded
     * @param state State of video
     * @param mass_storage_id Mass storage id where the video was recorded
     */
    @Override
    public synchronized void onARDrone3MediaRecordStateVideoStateChangedUpdate (ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_ENUM state, byte mass_storage_id)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationStateKey, (state != null) ? state.getValue() : ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_ENUM.ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_MAX.getValue());
        if (state == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `state` in VideoStateChanged command from the device.");
        }
        notificationBundle.putByte(ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationMass_storage_idKey, mass_storage_id);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>FlatTrimChanged</code> of class <code>PilotingState</code> in project <code>ARDrone3</code> is decoded
     */
    @Override
    public synchronized void onARDrone3PilotingStateFlatTrimChangedUpdate ()
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>FlyingStateChanged</code> of class <code>PilotingState</code> in project <code>ARDrone3</code> is decoded
     * @param state Drone flying state
     */
    @Override
    public synchronized void onARDrone3PilotingStateFlyingStateChangedUpdate (ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_ENUM state)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotificationStateKey, (state != null) ? state.getValue() : ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_ENUM.ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_MAX.getValue());
        if (state == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `state` in FlyingStateChanged command from the device.");
        }
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AlertStateChanged</code> of class <code>PilotingState</code> in project <code>ARDrone3</code> is decoded
     * @param state Drone alert state
     */
    @Override
    public synchronized void onARDrone3PilotingStateAlertStateChangedUpdate (ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_ENUM state)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(ARDrone3DeviceControllerPilotingStateAlertStateChangedNotificationStateKey, (state != null) ? state.getValue() : ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_ENUM.ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_MAX.getValue());
        if (state == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `state` in AlertStateChanged command from the device.");
        }
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>NavigateHomeStateChanged</code> of class <code>PilotingState</code> in project <code>ARDrone3</code> is decoded
     * @param state State of navigate home
     * @param reason Reason of the state
     */
    @Override
    public synchronized void onARDrone3PilotingStateNavigateHomeStateChangedUpdate (ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_ENUM state, ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_ENUM reason)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationStateKey, (state != null) ? state.getValue() : ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_ENUM.ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_MAX.getValue());
        if (state == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `state` in NavigateHomeStateChanged command from the device.");
        }
        notificationBundle.putInt(ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationReasonKey, (reason != null) ? reason.getValue() : ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_ENUM.ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_MAX.getValue());
        if (reason == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `reason` in NavigateHomeStateChanged command from the device.");
        }
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>PositionChanged</code> of class <code>PilotingState</code> in project <code>ARDrone3</code> is decoded
     * @param latitude Latitude position in decimal degrees (500.0 if not available)
     * @param longitude Longitude position in decimal degrees (500.0 if not available)
     * @param altitude Altitude in meters (from GPS)
     */
    @Override
    public synchronized void onARDrone3PilotingStatePositionChangedUpdate (double latitude, double longitude, double altitude)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putDouble(ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLatitudeKey, latitude);
        notificationBundle.putDouble(ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLongitudeKey, longitude);
        notificationBundle.putDouble(ARDrone3DeviceControllerPilotingStatePositionChangedNotificationAltitudeKey, altitude);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingStatePositionChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingStatePositionChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingStatePositionChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>SpeedChanged</code> of class <code>PilotingState</code> in project <code>ARDrone3</code> is decoded
     * @param speedX Speed on the x axis (when drone moves forward, speed is > 0) (in m/s)
     * @param speedY Speed on the y axis (when drone moves to right, speed is > 0) (in m/s)
     * @param speedZ Speed on the z axis (when drone moves down, speed is > 0) (in m/s)
     */
    @Override
    public synchronized void onARDrone3PilotingStateSpeedChangedUpdate (float speedX, float speedY, float speedZ)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedXKey, speedX);
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedYKey, speedY);
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedZKey, speedZ);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingStateSpeedChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingStateSpeedChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingStateSpeedChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AttitudeChanged</code> of class <code>PilotingState</code> in project <code>ARDrone3</code> is decoded
     * @param roll roll value (in radian)
     * @param pitch Pitch value (in radian)
     * @param yaw Yaw value (in radian)
     */
    @Override
    public synchronized void onARDrone3PilotingStateAttitudeChangedUpdate (float roll, float pitch, float yaw)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationRollKey, roll);
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationPitchKey, pitch);
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationYawKey, yaw);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AutoTakeOffModeChanged</code> of class <code>PilotingState</code> in project <code>ARDrone3</code> is decoded
     * @param state State of automatic take off mode (1 if enabled)
     */
    @Override
    public synchronized void onARDrone3PilotingStateAutoTakeOffModeChangedUpdate (byte state)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotificationStateKey, state);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AltitudeChanged</code> of class <code>PilotingState</code> in project <code>ARDrone3</code> is decoded
     * @param altitude Altitude in meters
     */
    @Override
    public synchronized void onARDrone3PilotingStateAltitudeChangedUpdate (double altitude)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putDouble(ARDrone3DeviceControllerPilotingStateAltitudeChangedNotificationAltitudeKey, altitude);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>WifiScanListChanged</code> of class <code>NetworkState</code> in project <code>ARDrone3</code> is decoded
     * @param ssid SSID of the AP
     * @param rssi RSSI of the AP in dbm (negative value)
     * @param band The band : 2.4 GHz or 5 GHz
     * @param channel Channel of the AP
     */
    @Override
    public synchronized void onARDrone3NetworkStateWifiScanListChangedUpdate (String ssid, short rssi, ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_ENUM band, byte channel)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationSsidKey, ssid);
        notificationBundle.putShort(ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationRssiKey, rssi);
        notificationBundle.putInt(ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationBandKey, (band != null) ? band.getValue() : ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_ENUM.ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_MAX.getValue());
        if (band == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `band` in WifiScanListChanged command from the device.");
        }
        notificationBundle.putByte(ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationChannelKey, channel);
        
        Bundle listDictionary = notificationDictionary.getBundle( ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification);
        if(listDictionary == null)
        {
            listDictionary = new Bundle();
        }
        listDictionary.putBundle(String.format("%s", ssid), notificationBundle);
        notificationBundle = listDictionary;
        
        updateDictionary.putBundle(ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AllWifiScanChanged</code> of class <code>NetworkState</code> in project <code>ARDrone3</code> is decoded
     */
    @Override
    public synchronized void onARDrone3NetworkStateAllWifiScanChangedUpdate ()
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        
        updateDictionary.putBundle(ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>WifiAuthChannelListChanged</code> of class <code>NetworkState</code> in project <code>ARDrone3</code> is decoded
     * @param band The band of this channel : 2.4 GHz or 5 GHz
     * @param channel The authorized channel.
     * @param in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)
     */
    @Override
    public synchronized void onARDrone3NetworkStateWifiAuthChannelListChangedUpdate (ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_ENUM band, byte channel, byte in_or_out)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationBandKey, (band != null) ? band.getValue() : ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_ENUM.ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_MAX.getValue());
        if (band == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `band` in WifiAuthChannelListChanged command from the device.");
        }
        notificationBundle.putByte(ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationChannelKey, channel);
        notificationBundle.putByte(ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationIn_or_outKey, in_or_out);
        
        Bundle listDictionary = notificationDictionary.getBundle( ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification);
        if(listDictionary == null)
        {
            listDictionary = new Bundle();
        }
        listDictionary.putBundle(String.format("%s", band), notificationBundle);
        notificationBundle = listDictionary;
        
        updateDictionary.putBundle(ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AllWifiAuthChannelChanged</code> of class <code>NetworkState</code> in project <code>ARDrone3</code> is decoded
     */
    @Override
    public synchronized void onARDrone3NetworkStateAllWifiAuthChannelChangedUpdate ()
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        
        updateDictionary.putBundle(ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MaxAltitudeChanged</code> of class <code>PilotingSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param current Current altitude max
     * @param min Range min of altitude
     * @param max Range max of altitude
     */
    @Override
    public synchronized void onARDrone3PilotingSettingsStateMaxAltitudeChangedUpdate (float current, float min, float max)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationCurrentKey, current);
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMinKey, min);
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMaxKey, max);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MaxTiltChanged</code> of class <code>PilotingSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param current Current max tilt
     * @param min Range min of tilt
     * @param max Range max of tilt
     */
    @Override
    public synchronized void onARDrone3PilotingSettingsStateMaxTiltChangedUpdate (float current, float min, float max)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationCurrentKey, current);
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMinKey, min);
        notificationBundle.putFloat(ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMaxKey, max);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AbsolutControlChanged</code> of class <code>PilotingSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param on 1 if enabled, 0 if disabled
     */
    @Override
    public synchronized void onARDrone3PilotingSettingsStateAbsolutControlChangedUpdate (byte on)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotificationOnKey, on);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MaxVerticalSpeedChanged</code> of class <code>SpeedSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param current Current max vertical speed in m/s
     * @param min Range min of vertical speed
     * @param max Range max of vertical speed
     */
    @Override
    public synchronized void onARDrone3SpeedSettingsStateMaxVerticalSpeedChangedUpdate (float current, float min, float max)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putFloat(ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationCurrentKey, current);
        notificationBundle.putFloat(ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMinKey, min);
        notificationBundle.putFloat(ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMaxKey, max);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MaxRotationSpeedChanged</code> of class <code>SpeedSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param current Current max rotation speed in degree/s
     * @param min Range min of rotation speed
     * @param max Range max of rotation speed
     */
    @Override
    public synchronized void onARDrone3SpeedSettingsStateMaxRotationSpeedChangedUpdate (float current, float min, float max)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putFloat(ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationCurrentKey, current);
        notificationBundle.putFloat(ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMinKey, min);
        notificationBundle.putFloat(ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMaxKey, max);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>HullProtectionChanged</code> of class <code>SpeedSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param present 1 if present, 0 if not present
     */
    @Override
    public synchronized void onARDrone3SpeedSettingsStateHullProtectionChangedUpdate (byte present)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotificationPresentKey, present);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>OutdoorChanged</code> of class <code>SpeedSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param outdoor 1 if outdoor flight, 0 if indoor flight
     */
    @Override
    public synchronized void onARDrone3SpeedSettingsStateOutdoorChangedUpdate (byte outdoor)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotificationOutdoorKey, outdoor);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>WifiSelectionChanged</code> of class <code>NetworkSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param type The type of wifi selection settings
     * @param band The actual  wifi band state
     * @param channel The channel (depends of the band)
     */
    @Override
    public synchronized void onARDrone3NetworkSettingsStateWifiSelectionChangedUpdate (ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_ENUM type, ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ENUM band, byte channel)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationTypeKey, (type != null) ? type.getValue() : ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_ENUM.ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MAX.getValue());
        if (type == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `type` in WifiSelectionChanged command from the device.");
        }
        notificationBundle.putInt(ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationBandKey, (band != null) ? band.getValue() : ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ENUM.ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_MAX.getValue());
        if (band == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `band` in WifiSelectionChanged command from the device.");
        }
        notificationBundle.putByte(ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationChannelKey, channel);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ProductMotorVersionListChanged</code> of class <code>SettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param motor_number Product Motor number
     * @param type Product Motor type
     * @param software Product Motors software version
     * @param hardware Product Motors hardware version
     */
    @Override
    public synchronized void onARDrone3SettingsStateProductMotorVersionListChangedUpdate (byte motor_number, String type, String software, String hardware)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationMotor_numberKey, motor_number);
        notificationBundle.putString(ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationTypeKey, type);
        notificationBundle.putString(ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationSoftwareKey, software);
        notificationBundle.putString(ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationHardwareKey, hardware);
        
        Bundle listDictionary = notificationDictionary.getBundle( ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification);
        if(listDictionary == null)
        {
            listDictionary = new Bundle();
        }
        listDictionary.putBundle(String.format("%d", motor_number), notificationBundle);
        notificationBundle = listDictionary;
        
        updateDictionary.putBundle(ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ProductGPSVersionChanged</code> of class <code>SettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param software Product GPS software version
     * @param hardware Product GPS hardware version
     */
    @Override
    public synchronized void onARDrone3SettingsStateProductGPSVersionChangedUpdate (String software, String hardware)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationSoftwareKey, software);
        notificationBundle.putString(ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationHardwareKey, hardware);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MotorErrorStateChanged</code> of class <code>SettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param motorIds Bit field for concerned motor. If bit 0 = 1, motor 1 is affected by this error. Same with bit 1, 2 and 3.
     * @param motorError Enumeration of the motor error
     */
    @Override
    public synchronized void onARDrone3SettingsStateMotorErrorStateChangedUpdate (byte motorIds, ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ENUM motorError)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorIdsKey, motorIds);
        notificationBundle.putInt(ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorErrorKey, (motorError != null) ? motorError.getValue() : ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ENUM.ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_MAX.getValue());
        if (motorError == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `motorError` in MotorErrorStateChanged command from the device.");
        }
        
        updateDictionary.putBundle(ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MotorSoftwareVersionChanged</code> of class <code>SettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param version name of the version : dot separated fields (major version - minor version - firmware type - nb motors handled). Firmware types : Release, Debug, Alpha, Test-bench
     */
    @Override
    public synchronized void onARDrone3SettingsStateMotorSoftwareVersionChangedUpdate (String version)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotificationVersionKey, version);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MotorFlightsStatusChanged</code> of class <code>SettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param nbFlights total number of flights
     * @param lastFlightDuration Duration of the last flight (in seconds)
     * @param totalFlightDuration Duration of all flights (in seconds)
     */
    @Override
    public synchronized void onARDrone3SettingsStateMotorFlightsStatusChangedUpdate (short nbFlights, short lastFlightDuration, int totalFlightDuration)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putShort(ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationNbFlightsKey, nbFlights);
        notificationBundle.putShort(ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationLastFlightDurationKey, lastFlightDuration);
        notificationBundle.putInt(ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationTotalFlightDurationKey, totalFlightDuration);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MotorErrorLastErrorChanged</code> of class <code>SettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param motorError Enumeration of the motor error
     */
    @Override
    public synchronized void onARDrone3SettingsStateMotorErrorLastErrorChangedUpdate (ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ENUM motorError)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotificationMotorErrorKey, (motorError != null) ? motorError.getValue() : ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ENUM.ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_MAX.getValue());
        if (motorError == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `motorError` in MotorErrorLastErrorChanged command from the device.");
        }
        
        updateDictionary.putBundle(ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>PictureFormatChanged</code> of class <code>PictureSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param type The type of photo format
     */
    @Override
    public synchronized void onARDrone3PictureSettingsStatePictureFormatChangedUpdate (ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_ENUM type)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotificationTypeKey, (type != null) ? type.getValue() : ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_ENUM.ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_MAX.getValue());
        if (type == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `type` in PictureFormatChanged command from the device.");
        }
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AutoWhiteBalanceChanged</code> of class <code>PictureSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param type The type auto white balance
     */
    @Override
    public synchronized void onARDrone3PictureSettingsStateAutoWhiteBalanceChangedUpdate (ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_ENUM type)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotificationTypeKey, (type != null) ? type.getValue() : ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_ENUM.ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_MAX.getValue());
        if (type == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `type` in AutoWhiteBalanceChanged command from the device.");
        }
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ExpositionChanged</code> of class <code>PictureSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param value Exposition value
     * @param min Min exposition value
     * @param max Max exposition value
     */
    @Override
    public synchronized void onARDrone3PictureSettingsStateExpositionChangedUpdate (float value, float min, float max)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putFloat(ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationValueKey, value);
        notificationBundle.putFloat(ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMinKey, min);
        notificationBundle.putFloat(ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMaxKey, max);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>SaturationChanged</code> of class <code>PictureSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param value Saturation value
     * @param min Min saturation value
     * @param max Max saturation value
     */
    @Override
    public synchronized void onARDrone3PictureSettingsStateSaturationChangedUpdate (float value, float min, float max)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putFloat(ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationValueKey, value);
        notificationBundle.putFloat(ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMinKey, min);
        notificationBundle.putFloat(ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMaxKey, max);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>TimelapseChanged</code> of class <code>PictureSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param enabled 1 if timelapse is enabled, 0 otherwise
     * @param interval interval in seconds for taking pictures
     * @param minInterval Minimal interval for taking pictures
     * @param maxInterval Maximal interval for taking pictures
     */
    @Override
    public synchronized void onARDrone3PictureSettingsStateTimelapseChangedUpdate (byte enabled, float interval, float minInterval, float maxInterval)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationEnabledKey, enabled);
        notificationBundle.putFloat(ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationIntervalKey, interval);
        notificationBundle.putFloat(ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMinIntervalKey, minInterval);
        notificationBundle.putFloat(ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMaxIntervalKey, maxInterval);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>VideoAutorecordChanged</code> of class <code>PictureSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param enabled 1 if video autorecord is enabled, 0 otherwise
     * @param mass_storage_id Mass storage id for the taken video
     */
    @Override
    public synchronized void onARDrone3PictureSettingsStateVideoAutorecordChangedUpdate (byte enabled, byte mass_storage_id)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationEnabledKey, enabled);
        notificationBundle.putByte(ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationMass_storage_idKey, mass_storage_id);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>VideoEnableChanged</code> of class <code>MediaStreamingState</code> in project <code>ARDrone3</code> is decoded
     * @param enabled Current video streaming status.
     */
    @Override
    public synchronized void onARDrone3MediaStreamingStateVideoEnableChangedUpdate (ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENUM enabled)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotificationEnabledKey, (enabled != null) ? enabled.getValue() : ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENUM.ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_MAX.getValue());
        if (enabled == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `enabled` in VideoEnableChanged command from the device.");
        }
        
        updateDictionary.putBundle(ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>HomeChanged</code> of class <code>GPSSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param latitude Home latitude in decimal degrees
     * @param longitude Home longitude in decimal degrees
     * @param altitude Home altitude in meters
     */
    @Override
    public synchronized void onARDrone3GPSSettingsStateHomeChangedUpdate (double latitude, double longitude, double altitude)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putDouble(ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLatitudeKey, latitude);
        notificationBundle.putDouble(ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLongitudeKey, longitude);
        notificationBundle.putDouble(ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationAltitudeKey, altitude);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ResetHomeChanged</code> of class <code>GPSSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param latitude Home latitude in decimal degrees
     * @param longitude Home longitude in decimal degrees
     * @param altitude Home altitude in meters
     */
    @Override
    public synchronized void onARDrone3GPSSettingsStateResetHomeChangedUpdate (double latitude, double longitude, double altitude)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putDouble(ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLatitudeKey, latitude);
        notificationBundle.putDouble(ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLongitudeKey, longitude);
        notificationBundle.putDouble(ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationAltitudeKey, altitude);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>GPSFixStateChanged</code> of class <code>GPSSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param fixed 1 if gps on drone is fixed, 0 otherwise
     */
    @Override
    public synchronized void onARDrone3GPSSettingsStateGPSFixStateChangedUpdate (byte fixed)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotificationFixedKey, fixed);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>GPSUpdateStateChanged</code> of class <code>GPSSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param state The state of the gps update
     */
    @Override
    public synchronized void onARDrone3GPSSettingsStateGPSUpdateStateChangedUpdate (ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_ENUM state)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotificationStateKey, (state != null) ? state.getValue() : ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_ENUM.ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_MAX.getValue());
        if (state == null)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `state` in GPSUpdateStateChanged command from the device.");
        }
        
        updateDictionary.putBundle(ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>Orientation</code> of class <code>CameraState</code> in project <code>ARDrone3</code> is decoded
     * @param tilt Tilt camera consign for the drone [-100;100]
     * @param pan Pan camera consign for the drone [-100;100]
     */
    @Override
    public synchronized void onARDrone3CameraStateOrientationUpdate (byte tilt, byte pan)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerCameraStateOrientationNotificationTiltKey, tilt);
        notificationBundle.putByte(ARDrone3DeviceControllerCameraStateOrientationNotificationPanKey, pan);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerCameraStateOrientationNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerCameraStateOrientationNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerCameraStateOrientationNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>UseDrone2BatteryChanged</code> of class <code>BatteryDebugSettingsState</code> in project <code>ARDrone3</code> is decoded
     * @param drone2BatteryUsed 1 if the drone2 battery is used, 0 if the drone3 battery is used
     */
    @Override
    public synchronized void onARDrone3DebugBatteryDebugSettingsStateUseDrone2BatteryChangedUpdate (byte drone2BatteryUsed)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerBatteryDebugSettingsStateUseDrone2BatteryChangedNotificationDrone2BatteryUsedKey, drone2BatteryUsed);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerBatteryDebugSettingsStateUseDrone2BatteryChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerBatteryDebugSettingsStateUseDrone2BatteryChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerBatteryDebugSettingsStateUseDrone2BatteryChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>NbSatelliteChanged</code> of class <code>GPSDebugState</code> in project <code>ARDrone3</code> is decoded
     * @param nbSatellite Amount of satellite used by gps location
     */
    @Override
    public synchronized void onARDrone3DebugGPSDebugStateNbSatelliteChangedUpdate (byte nbSatellite)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(ARDrone3DeviceControllerGPSDebugStateNbSatelliteChangedNotificationNbSatelliteKey, nbSatellite);
        
        updateDictionary.putBundle(ARDrone3DeviceControllerGPSDebugStateNbSatelliteChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(ARDrone3DeviceControllerGPSDebugStateNbSatelliteChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = aRDrone3DeviceControllerAndLibARCommandsIntentCache.get(ARDrone3DeviceControllerGPSDebugStateNbSatelliteChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Send a command <code>FlatTrim</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean ARDrone3DeviceController_SendPilotingFlatTrim (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PilotingFlatTrim ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send FlatTrim command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>TakeOff</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean ARDrone3DeviceController_SendPilotingTakeOff (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PilotingTakeOff ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send TakeOff command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>PCMD</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param flag Boolean flag to activate roll/pitch movement
     * @param roll Roll consign for the drone [-100;100]
     * @param pitch Pitch consign for the drone [-100;100]
     * @param yaw Yaw consign for the drone [-100;100]
     * @param gaz Gaz consign for the drone [-100;100]
     * @param psi Magnetic north heading of the controlling device (deg) [-180;180]
     */
    protected boolean ARDrone3DeviceController_SendPilotingPCMD (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte flag, byte roll, byte pitch, byte yaw, byte gaz, float psi)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PilotingPCMD (flag, roll, pitch, yaw, gaz, psi);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send PCMD command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Landing</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean ARDrone3DeviceController_SendPilotingLanding (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PilotingLanding ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Landing command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Emergency</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean ARDrone3DeviceController_SendPilotingEmergency (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PilotingEmergency ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Emergency command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>NavigateHome</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param start 1 to start the navigate home, 0 to stop it
     */
    protected boolean ARDrone3DeviceController_SendPilotingNavigateHome (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte start)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PilotingNavigateHome (start);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send NavigateHome command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>AutoTakeOffMode</code> of class <code>Piloting</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param state State of automatic take off mode (1 for autotake off enabled)
     */
    protected boolean ARDrone3DeviceController_SendPilotingAutoTakeOffMode (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte state)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PilotingAutoTakeOffMode (state);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send AutoTakeOffMode command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Flip</code> of class <code>Animations</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param direction Direction for the flip
     */
    protected boolean ARDrone3DeviceController_SendAnimationsFlip (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_ENUM direction)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3AnimationsFlip (direction);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Flip command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Orientation</code> of class <code>Camera</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param tilt Tilt camera consign for the drone (in degree)
     * @param tilt The value is saturated by the drone.
     * @param tilt Saturation value is sent by thre drone through CameraSettingsChanged command.
     * @param pan Pan camera consign for the drone (in degree)
     * @param pan The value is saturated by the drone.
     * @param pan Saturation value is sent by thre drone through CameraSettingsChanged command.
     */
    protected boolean ARDrone3DeviceController_SendCameraOrientation (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte tilt, byte pan)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3CameraOrientation (tilt, pan);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Orientation command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Picture</code> of class <code>MediaRecord</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param mass_storage_id Mass storage id to take picture
     */
    protected boolean ARDrone3DeviceController_SendMediaRecordPicture (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte mass_storage_id)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3MediaRecordPicture (mass_storage_id);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Picture command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Video</code> of class <code>MediaRecord</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param record Command to record video
     * @param mass_storage_id Mass storage id to record
     */
    protected boolean ARDrone3DeviceController_SendMediaRecordVideo (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD_ENUM record, byte mass_storage_id)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3MediaRecordVideo (record, mass_storage_id);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Video command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>WifiScan</code> of class <code>Network</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param band The band(s) : 2.4 Ghz, 5 Ghz, or both
     */
    protected boolean ARDrone3DeviceController_SendNetworkWifiScan (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_ENUM band)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3NetworkWifiScan (band);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send WifiScan command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>WifiAuthChannel</code> of class <code>Network</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean ARDrone3DeviceController_SendNetworkWifiAuthChannel (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3NetworkWifiAuthChannel ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send WifiAuthChannel command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>MaxAltitude</code> of class <code>PilotingSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param current Current altitude max in m
     */
    protected boolean ARDrone3DeviceController_SendPilotingSettingsMaxAltitude (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, float current)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PilotingSettingsMaxAltitude (current);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send MaxAltitude command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>MaxTilt</code> of class <code>PilotingSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param current Current tilt max in degree
     */
    protected boolean ARDrone3DeviceController_SendPilotingSettingsMaxTilt (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, float current)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PilotingSettingsMaxTilt (current);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send MaxTilt command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>AbsolutControl</code> of class <code>PilotingSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param on 1 to enable, 0 to disable
     */
    protected boolean ARDrone3DeviceController_SendPilotingSettingsAbsolutControl (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte on)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PilotingSettingsAbsolutControl (on);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send AbsolutControl command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>MaxVerticalSpeed</code> of class <code>SpeedSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param current Current max vertical speed in m/s
     */
    protected boolean ARDrone3DeviceController_SendSpeedSettingsMaxVerticalSpeed (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, float current)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3SpeedSettingsMaxVerticalSpeed (current);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send MaxVerticalSpeed command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>MaxRotationSpeed</code> of class <code>SpeedSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param current Current max rotation speed in degree/s
     */
    protected boolean ARDrone3DeviceController_SendSpeedSettingsMaxRotationSpeed (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, float current)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3SpeedSettingsMaxRotationSpeed (current);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send MaxRotationSpeed command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>HullProtection</code> of class <code>SpeedSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param present 1 if present, 0 if not present
     */
    protected boolean ARDrone3DeviceController_SendSpeedSettingsHullProtection (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte present)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3SpeedSettingsHullProtection (present);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send HullProtection command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Outdoor</code> of class <code>SpeedSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param outdoor 1 if outdoor flight, 0 if indoor flight
     */
    protected boolean ARDrone3DeviceController_SendSpeedSettingsOutdoor (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte outdoor)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3SpeedSettingsOutdoor (outdoor);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Outdoor command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>WifiSelection</code> of class <code>NetworkSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param type The type of wifi selection (auto, manual)
     * @param band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
     * @param channel The channel (not used in auto mode)
     */
    protected boolean ARDrone3DeviceController_SendNetworkSettingsWifiSelection (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE_ENUM type, ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_ENUM band, byte channel)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3NetworkSettingsWifiSelection (type, band, channel);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send WifiSelection command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>PictureFormatSelection</code> of class <code>PictureSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param type The type of photo format
     */
    protected boolean ARDrone3DeviceController_SendPictureSettingsPictureFormatSelection (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_ENUM type)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PictureSettingsPictureFormatSelection (type);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send PictureFormatSelection command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>AutoWhiteBalanceSelection</code> of class <code>PictureSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param type The type auto white balance
     */
    protected boolean ARDrone3DeviceController_SendPictureSettingsAutoWhiteBalanceSelection (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_ENUM type)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PictureSettingsAutoWhiteBalanceSelection (type);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send AutoWhiteBalanceSelection command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>ExpositionSelection</code> of class <code>PictureSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param value Exposition value (bounds given by ExpositionChanged arg min and max, by default [-3:3])
     */
    protected boolean ARDrone3DeviceController_SendPictureSettingsExpositionSelection (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, float value)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PictureSettingsExpositionSelection (value);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send ExpositionSelection command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>SaturationSelection</code> of class <code>PictureSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param value Saturation value (bounds given by SaturationChanged arg min and max, by default [-100:100])
     */
    protected boolean ARDrone3DeviceController_SendPictureSettingsSaturationSelection (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, float value)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PictureSettingsSaturationSelection (value);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send SaturationSelection command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>TimelapseSelection</code> of class <code>PictureSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param enabled 1 if timelapse is enabled, 0 otherwise
     * @param interval interval in seconds for taking pictures
     */
    protected boolean ARDrone3DeviceController_SendPictureSettingsTimelapseSelection (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte enabled, float interval)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PictureSettingsTimelapseSelection (enabled, interval);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send TimelapseSelection command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>VideoAutorecordSelection</code> of class <code>PictureSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param enabled 1 if video autorecord is enabled, 0 otherwise
     * @param mass_storage_id Mass storage id to take video
     */
    protected boolean ARDrone3DeviceController_SendPictureSettingsVideoAutorecordSelection (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte enabled, byte mass_storage_id)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3PictureSettingsVideoAutorecordSelection (enabled, mass_storage_id);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send VideoAutorecordSelection command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>VideoEnable</code> of class <code>MediaStreaming</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param enable 1 to enable, 0 to disable.
     */
    protected boolean ARDrone3DeviceController_SendMediaStreamingVideoEnable (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte enable)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3MediaStreamingVideoEnable (enable);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send VideoEnable command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>SetHome</code> of class <code>GPSSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param latitude Home latitude in decimal degrees
     * @param longitude Home longitude in decimal degrees
     * @param altitude Home altitude in meters
     */
    protected boolean ARDrone3DeviceController_SendGPSSettingsSetHome (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, double latitude, double longitude, double altitude)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3GPSSettingsSetHome (latitude, longitude, altitude);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send SetHome command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>ResetHome</code> of class <code>GPSSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean ARDrone3DeviceController_SendGPSSettingsResetHome (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3GPSSettingsResetHome ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send ResetHome command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>EnableWobbleCancellation</code> of class <code>Video</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param enable When enable=0, wobble cancellation is disabled else it's enabled
     */
    protected boolean ARDrone3DeviceController_SendVideoEnableWobbleCancellation (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte enable)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3DebugVideoEnableWobbleCancellation (enable);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send EnableWobbleCancellation command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>SyncAnglesGyros</code> of class <code>Video</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param anglesDelay_s Shift by x seconds angles (video stabilization)
     * @param gyrosDelay_s Shift by x seconds t gyros (wobble cancellation
     */
    protected boolean ARDrone3DeviceController_SendVideoSyncAnglesGyros (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, float anglesDelay_s, float gyrosDelay_s)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3DebugVideoSyncAnglesGyros (anglesDelay_s, gyrosDelay_s);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send SyncAnglesGyros command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>ManualWhiteBalance</code> of class <code>Video</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean ARDrone3DeviceController_SendVideoManualWhiteBalance (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3DebugVideoManualWhiteBalance ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send ManualWhiteBalance command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>UseDrone2Battery</code> of class <code>BatteryDebugSettings</code> in project <code>ARDrone3</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param drone2BatteryUsed 1 if the drone2 battery is used, 0 if the drone3 battery is used
     */
    protected boolean ARDrone3DeviceController_SendBatteryDebugSettingsUseDrone2Battery (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte drone2BatteryUsed)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setARDrone3DebugBatteryDebugSettingsUseDrone2Battery (drone2BatteryUsed);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(ARDRONE3DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send UseDrone2Battery command.");
        }
        
        return sentStatus;
    }
    
}

// END GENERATED CODE
