/*
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
package com.parrot.freeflight3.devicecontrollers;

/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllerCategories.py script *
 *                                                        *
 **********************************************************/

import com.parrot.arsdk.ardiscovery.ARDiscoveryDeviceService;
import com.parrot.arsdk.arcommands.ARCommand;
import com.parrot.arsdk.arnetwork.ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_GENERATOR_ERROR_ENUM;
import com.parrot.arsdk.arsal.ARSALPrint;
import java.util.HashMap;
import android.os.Bundle;
import android.content.Intent;
import android.support.v4.content.LocalBroadcastManager;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoPilotingStatePostureChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoPilotingStateAlertStateChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoAnimationsStateJumpLoadChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoSettingsStateProductGPSVersionChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoMediaRecordStatePictureStateChangedListener;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoMediaRecordStateVideoStateChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoNetworkSettingsStateWifiSelectionChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoNetworkStateWifiScanListChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoNetworkStateAllWifiScanChangedListener;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoNetworkStateWifiAuthChannelListChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoNetworkStateAllWifiAuthChannelChangedListener;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoNetworkStateLinkQualityChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoAudioSettingsStateMasterVolumeChangedListener;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoAudioSettingsStateThemeChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoRoadPlanStateScriptMetadataListChangedListener;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoRoadPlanStateAllScriptsMetadataChangedListener;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoRoadPlanStateScriptUploadChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoRoadPlanStateScriptDeleteChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoRoadPlanStatePlayScriptChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoSpeedSettingsStateOutdoorChangedListener;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoMediaStreamingStateVideoEnableChangedListener;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_ENUM;
import com.parrot.arsdk.arcommands.ARCommandJumpingSumoDebugUserScriptStateUserScriptParsedListener;

public abstract class JumpingSumoDeviceControllerAndLibARCommands extends DeviceController implements ARCommandJumpingSumoPilotingStatePostureChangedListener, ARCommandJumpingSumoPilotingStateAlertStateChangedListener, ARCommandJumpingSumoAnimationsStateJumpLoadChangedListener, ARCommandJumpingSumoSettingsStateProductGPSVersionChangedListener, ARCommandJumpingSumoMediaRecordStatePictureStateChangedListener, ARCommandJumpingSumoMediaRecordStateVideoStateChangedListener, ARCommandJumpingSumoNetworkSettingsStateWifiSelectionChangedListener, ARCommandJumpingSumoNetworkStateWifiScanListChangedListener, ARCommandJumpingSumoNetworkStateAllWifiScanChangedListener, ARCommandJumpingSumoNetworkStateWifiAuthChannelListChangedListener, ARCommandJumpingSumoNetworkStateAllWifiAuthChannelChangedListener, ARCommandJumpingSumoNetworkStateLinkQualityChangedListener, ARCommandJumpingSumoAudioSettingsStateMasterVolumeChangedListener, ARCommandJumpingSumoAudioSettingsStateThemeChangedListener, ARCommandJumpingSumoRoadPlanStateScriptMetadataListChangedListener, ARCommandJumpingSumoRoadPlanStateAllScriptsMetadataChangedListener, ARCommandJumpingSumoRoadPlanStateScriptUploadChangedListener, ARCommandJumpingSumoRoadPlanStateScriptDeleteChangedListener, ARCommandJumpingSumoRoadPlanStatePlayScriptChangedListener, ARCommandJumpingSumoSpeedSettingsStateOutdoorChangedListener, ARCommandJumpingSumoMediaStreamingStateVideoEnableChangedListener, ARCommandJumpingSumoDebugUserScriptStateUserScriptParsedListener
{
    private final static String JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG = "JumpingSumoDeviceControllerAndLibARCommands";
    
    private HashMap<String, Intent> jumpingSumoDeviceControllerAndLibARCommandsIntentCache;
    public final static String JumpingSumoDeviceControllerPilotingStatePostureChangedNotification = "JumpingSumoDeviceControllerPilotingStatePostureChangedNotification";
    public final static String JumpingSumoDeviceControllerPilotingStatePostureChangedNotificationStateKey = "JumpingSumoDeviceControllerPilotingStatePostureChangedNotificationStateKey";
    public final static String JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotification = "JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotification";
    public final static String JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotificationStateKey = "JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotificationStateKey";
    public final static String JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotification = "JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotification";
    public final static String JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotificationStateKey = "JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotificationStateKey";
    public final static String JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotification = "JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotification";
    public final static String JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotificationSoftwareKey = "JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotificationSoftwareKey";
    public final static String JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotificationHardwareKey = "JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotificationHardwareKey";
    public final static String JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotification = "JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotification";
    public final static String JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotificationStateKey = "JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotificationStateKey";
    public final static String JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotificationMass_storage_idKey = "JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotificationMass_storage_idKey";
    public final static String JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotification = "JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotification";
    public final static String JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotificationStateKey = "JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotificationStateKey";
    public final static String JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotificationMass_storage_idKey = "JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotificationMass_storage_idKey";
    public final static String JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotification = "JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotification";
    public final static String JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationTypeKey = "JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationTypeKey";
    public final static String JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationBandKey = "JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationBandKey";
    public final static String JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationChannelKey = "JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationChannelKey";
    public final static String JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotification = "JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotification";
    public final static String JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationSsidKey = "JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationSsidKey";
    public final static String JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationRssiKey = "JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationRssiKey";
    public final static String JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationBandKey = "JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationBandKey";
    public final static String JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationChannelKey = "JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationChannelKey";
    public final static String JumpingSumoDeviceControllerNetworkStateAllWifiScanChangedNotification = "JumpingSumoDeviceControllerNetworkStateAllWifiScanChangedNotification";
    public final static String JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotification = "JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotification";
    public final static String JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationBandKey = "JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationBandKey";
    public final static String JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationChannelKey = "JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationChannelKey";
    public final static String JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationIn_or_outKey = "JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationIn_or_outKey";
    public final static String JumpingSumoDeviceControllerNetworkStateAllWifiAuthChannelChangedNotification = "JumpingSumoDeviceControllerNetworkStateAllWifiAuthChannelChangedNotification";
    public final static String JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotification = "JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotification";
    public final static String JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotificationQualityKey = "JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotificationQualityKey";
    public final static String JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotification = "JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotification";
    public final static String JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotificationVolumeKey = "JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotificationVolumeKey";
    public final static String JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotification = "JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotification";
    public final static String JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotificationThemeKey = "JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotificationThemeKey";
    public final static String JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotification = "JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotification";
    public final static String JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationUuidKey = "JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationUuidKey";
    public final static String JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationVersionKey = "JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationVersionKey";
    public final static String JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationProductKey = "JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationProductKey";
    public final static String JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationNameKey = "JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationNameKey";
    public final static String JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationLastModifiedKey = "JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationLastModifiedKey";
    public final static String JumpingSumoDeviceControllerRoadPlanStateAllScriptsMetadataChangedNotification = "JumpingSumoDeviceControllerRoadPlanStateAllScriptsMetadataChangedNotification";
    public final static String JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotification = "JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotification";
    public final static String JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotificationResultCodeKey = "JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotificationResultCodeKey";
    public final static String JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotification = "JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotification";
    public final static String JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotificationResultCodeKey = "JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotificationResultCodeKey";
    public final static String JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotification = "JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotification";
    public final static String JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotificationResultCodeKey = "JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotificationResultCodeKey";
    public final static String JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotification = "JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotification";
    public final static String JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotificationOutdoorKey = "JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotificationOutdoorKey";
    public final static String JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotification = "JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotification";
    public final static String JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotificationEnabledKey = "JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotificationEnabledKey";
    public final static String JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification = "JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification";
    public final static String JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationSuccessKey = "JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationSuccessKey";
    public final static String JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationMessageKey = "JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationMessageKey";

    protected void initialize ()
    {
        if(!isInitialized())
        {
            initJumpingSumoDeviceControllerAndLibARCommandsIntents ();
            super.initialize ();
        }
    }
    
    @Override
    protected void setConfigurations (ARNetworkConfig netConfig, ARDiscoveryDeviceService service, double interval, Class<? extends DeviceController> dcBridgeClass)
    {
        super.setConfigurations (netConfig, service, interval, dcBridgeClass);
    }
    
    @Override
    protected void registerARCommandsListener ()
    {
        super.registerARCommandsListener();
        
        ARCommand.setJumpingSumoPilotingStatePostureChangedListener (this);
        ARCommand.setJumpingSumoPilotingStateAlertStateChangedListener (this);
        ARCommand.setJumpingSumoAnimationsStateJumpLoadChangedListener (this);
        ARCommand.setJumpingSumoSettingsStateProductGPSVersionChangedListener (this);
        ARCommand.setJumpingSumoMediaRecordStatePictureStateChangedListener (this);
        ARCommand.setJumpingSumoMediaRecordStateVideoStateChangedListener (this);
        ARCommand.setJumpingSumoNetworkSettingsStateWifiSelectionChangedListener (this);
        ARCommand.setJumpingSumoNetworkStateWifiScanListChangedListener (this);
        ARCommand.setJumpingSumoNetworkStateAllWifiScanChangedListener (this);
        ARCommand.setJumpingSumoNetworkStateWifiAuthChannelListChangedListener (this);
        ARCommand.setJumpingSumoNetworkStateAllWifiAuthChannelChangedListener (this);
        ARCommand.setJumpingSumoNetworkStateLinkQualityChangedListener (this);
        ARCommand.setJumpingSumoAudioSettingsStateMasterVolumeChangedListener (this);
        ARCommand.setJumpingSumoAudioSettingsStateThemeChangedListener (this);
        ARCommand.setJumpingSumoRoadPlanStateScriptMetadataListChangedListener (this);
        ARCommand.setJumpingSumoRoadPlanStateAllScriptsMetadataChangedListener (this);
        ARCommand.setJumpingSumoRoadPlanStateScriptUploadChangedListener (this);
        ARCommand.setJumpingSumoRoadPlanStateScriptDeleteChangedListener (this);
        ARCommand.setJumpingSumoRoadPlanStatePlayScriptChangedListener (this);
        ARCommand.setJumpingSumoSpeedSettingsStateOutdoorChangedListener (this);
        ARCommand.setJumpingSumoMediaStreamingStateVideoEnableChangedListener (this);
        ARCommand.setJumpingSumoDebugUserScriptStateUserScriptParsedListener (this);
    }
    
    @Override
    protected void unregisterARCommandsListener ()
    {
        super.unregisterARCommandsListener();
        
        ARCommand.setJumpingSumoPilotingStatePostureChangedListener (null);
        ARCommand.setJumpingSumoPilotingStateAlertStateChangedListener (null);
        ARCommand.setJumpingSumoAnimationsStateJumpLoadChangedListener (null);
        ARCommand.setJumpingSumoSettingsStateProductGPSVersionChangedListener (null);
        ARCommand.setJumpingSumoMediaRecordStatePictureStateChangedListener (null);
        ARCommand.setJumpingSumoMediaRecordStateVideoStateChangedListener (null);
        ARCommand.setJumpingSumoNetworkSettingsStateWifiSelectionChangedListener (null);
        ARCommand.setJumpingSumoNetworkStateWifiScanListChangedListener (null);
        ARCommand.setJumpingSumoNetworkStateAllWifiScanChangedListener (null);
        ARCommand.setJumpingSumoNetworkStateWifiAuthChannelListChangedListener (null);
        ARCommand.setJumpingSumoNetworkStateAllWifiAuthChannelChangedListener (null);
        ARCommand.setJumpingSumoNetworkStateLinkQualityChangedListener (null);
        ARCommand.setJumpingSumoAudioSettingsStateMasterVolumeChangedListener (null);
        ARCommand.setJumpingSumoAudioSettingsStateThemeChangedListener (null);
        ARCommand.setJumpingSumoRoadPlanStateScriptMetadataListChangedListener (null);
        ARCommand.setJumpingSumoRoadPlanStateAllScriptsMetadataChangedListener (null);
        ARCommand.setJumpingSumoRoadPlanStateScriptUploadChangedListener (null);
        ARCommand.setJumpingSumoRoadPlanStateScriptDeleteChangedListener (null);
        ARCommand.setJumpingSumoRoadPlanStatePlayScriptChangedListener (null);
        ARCommand.setJumpingSumoSpeedSettingsStateOutdoorChangedListener (null);
        ARCommand.setJumpingSumoMediaStreamingStateVideoEnableChangedListener (null);
        ARCommand.setJumpingSumoDebugUserScriptStateUserScriptParsedListener (null);
    }
    
    private void initJumpingSumoDeviceControllerAndLibARCommandsIntents ()
    {
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache = new HashMap<String, Intent>(22);
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerPilotingStatePostureChangedNotification, new Intent (JumpingSumoDeviceControllerPilotingStatePostureChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotification, new Intent (JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotification, new Intent (JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotification, new Intent (JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotification, new Intent (JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotification, new Intent (JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotification, new Intent (JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotification, new Intent (JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerNetworkStateAllWifiScanChangedNotification, new Intent (JumpingSumoDeviceControllerNetworkStateAllWifiScanChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotification, new Intent (JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerNetworkStateAllWifiAuthChannelChangedNotification, new Intent (JumpingSumoDeviceControllerNetworkStateAllWifiAuthChannelChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotification, new Intent (JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotification, new Intent (JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotification, new Intent (JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotification, new Intent (JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerRoadPlanStateAllScriptsMetadataChangedNotification, new Intent (JumpingSumoDeviceControllerRoadPlanStateAllScriptsMetadataChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotification, new Intent (JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotification, new Intent (JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotification, new Intent (JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotification, new Intent (JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotification, new Intent (JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotification));
        jumpingSumoDeviceControllerAndLibARCommandsIntentCache.put(JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification, new Intent (JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification));
    }
    
    protected Intent getJumpingSumoDeviceControllerAndLibARCommandsIntent (String name)
    {
        return jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(name) ;
    }
    
    /** Method called in a dedicated thread on a configurable interval.
     * @note This is an abstract method that you must override.
     */
    public abstract void controllerLoop ();
    
    /**
     * Request a stopped controller to start.
     * @note This is an abstract method that you must override.
     */
    public abstract void start ();
    
    /**
     * Request a started controller to stop.
     * @note This is an abstract method that you must override.
     */
    public abstract void stop ();
    
    /**
     * Get the current state of the controller.
     * @return current state
     */
    public abstract DEVICE_CONTROLER_STATE_ENUM getState ();
    
    /**
     * Called when a command <code>PostureChanged</code> of class <code>PilotingState</code> in project <code>JumpingSumo</code> is decoded
     * @param state State of posture
     */
    @Override
    public synchronized void onJumpingSumoPilotingStatePostureChangedUpdate (ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_ENUM state)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(JumpingSumoDeviceControllerPilotingStatePostureChangedNotificationStateKey, (state != null) ? state.getValue() : ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_ENUM.ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_MAX.getValue());
        if (state == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `state` in PostureChanged command from the device.");
        }
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerPilotingStatePostureChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerPilotingStatePostureChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerPilotingStatePostureChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AlertStateChanged</code> of class <code>PilotingState</code> in project <code>JumpingSumo</code> is decoded
     * @param state JS alert state
     */
    @Override
    public synchronized void onJumpingSumoPilotingStateAlertStateChangedUpdate (ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_ENUM state)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotificationStateKey, (state != null) ? state.getValue() : ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_ENUM.ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_MAX.getValue());
        if (state == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `state` in AlertStateChanged command from the device.");
        }
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>JumpLoadChanged</code> of class <code>AnimationsState</code> in project <code>JumpingSumo</code> is decoded
     * @param state State of jump load
     */
    @Override
    public synchronized void onJumpingSumoAnimationsStateJumpLoadChangedUpdate (ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_ENUM state)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotificationStateKey, (state != null) ? state.getValue() : ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_ENUM.ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_MAX.getValue());
        if (state == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `state` in JumpLoadChanged command from the device.");
        }
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ProductGPSVersionChanged</code> of class <code>SettingsState</code> in project <code>JumpingSumo</code> is decoded
     * @param software Product GPS software version
     * @param hardware Product GPS hardware version
     */
    @Override
    public synchronized void onJumpingSumoSettingsStateProductGPSVersionChangedUpdate (String software, String hardware)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotificationSoftwareKey, software);
        notificationBundle.putString(JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotificationHardwareKey, hardware);
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>PictureStateChanged</code> of class <code>MediaRecordState</code> in project <code>JumpingSumo</code> is decoded
     * @param state 1 if picture has been taken, 0 otherwise
     * @param mass_storage_id Mass storage id where the picture was recorded
     */
    @Override
    public synchronized void onJumpingSumoMediaRecordStatePictureStateChangedUpdate (byte state, byte mass_storage_id)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotificationStateKey, state);
        notificationBundle.putByte(JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotificationMass_storage_idKey, mass_storage_id);
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>VideoStateChanged</code> of class <code>MediaRecordState</code> in project <code>JumpingSumo</code> is decoded
     * @param state State of video
     * @param mass_storage_id Mass storage id where the video was recorded
     */
    @Override
    public synchronized void onJumpingSumoMediaRecordStateVideoStateChangedUpdate (ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_ENUM state, byte mass_storage_id)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotificationStateKey, (state != null) ? state.getValue() : ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_ENUM.ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_MAX.getValue());
        if (state == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `state` in VideoStateChanged command from the device.");
        }
        notificationBundle.putByte(JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotificationMass_storage_idKey, mass_storage_id);
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>WifiSelectionChanged</code> of class <code>NetworkSettingsState</code> in project <code>JumpingSumo</code> is decoded
     * @param type The type of wifi selection settings
     * @param band The actual  wifi band state
     * @param channel The channel (depends of the band)
     */
    @Override
    public synchronized void onJumpingSumoNetworkSettingsStateWifiSelectionChangedUpdate (ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_ENUM type, ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ENUM band, byte channel)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationTypeKey, (type != null) ? type.getValue() : ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_ENUM.ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MAX.getValue());
        if (type == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `type` in WifiSelectionChanged command from the device.");
        }
        notificationBundle.putInt(JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationBandKey, (band != null) ? band.getValue() : ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ENUM.ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_MAX.getValue());
        if (band == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `band` in WifiSelectionChanged command from the device.");
        }
        notificationBundle.putByte(JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationChannelKey, channel);
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>WifiScanListChanged</code> of class <code>NetworkState</code> in project <code>JumpingSumo</code> is decoded
     * @param ssid SSID of the AP
     * @param rssi RSSI of the AP in dbm (negative value)
     * @param band The band : 2.4 GHz or 5 GHz
     * @param channel Channel of the AP
     */
    @Override
    public synchronized void onJumpingSumoNetworkStateWifiScanListChangedUpdate (String ssid, short rssi, ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_ENUM band, byte channel)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationSsidKey, ssid);
        notificationBundle.putShort(JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationRssiKey, rssi);
        notificationBundle.putInt(JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationBandKey, (band != null) ? band.getValue() : ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_ENUM.ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_MAX.getValue());
        if (band == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `band` in WifiScanListChanged command from the device.");
        }
        notificationBundle.putByte(JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationChannelKey, channel);
        
        Bundle listDictionary = notificationDictionary.getBundle( JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotification);
        if(listDictionary == null)
        {
            listDictionary = new Bundle();
        }
        listDictionary.putBundle(String.format("%s", ssid), notificationBundle);
        notificationBundle = listDictionary;
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AllWifiScanChanged</code> of class <code>NetworkState</code> in project <code>JumpingSumo</code> is decoded
     */
    @Override
    public synchronized void onJumpingSumoNetworkStateAllWifiScanChangedUpdate ()
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerNetworkStateAllWifiScanChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerNetworkStateAllWifiScanChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerNetworkStateAllWifiScanChangedNotification);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>WifiAuthChannelListChanged</code> of class <code>NetworkState</code> in project <code>JumpingSumo</code> is decoded
     * @param band The band of this channel : 2.4 GHz or 5 GHz
     * @param channel The authorized channel.
     * @param in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)
     */
    @Override
    public synchronized void onJumpingSumoNetworkStateWifiAuthChannelListChangedUpdate (ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_ENUM band, byte channel, byte in_or_out)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationBandKey, (band != null) ? band.getValue() : ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_ENUM.ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_MAX.getValue());
        if (band == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `band` in WifiAuthChannelListChanged command from the device.");
        }
        notificationBundle.putByte(JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationChannelKey, channel);
        notificationBundle.putByte(JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationIn_or_outKey, in_or_out);
        
        Bundle listDictionary = notificationDictionary.getBundle( JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotification);
        if(listDictionary == null)
        {
            listDictionary = new Bundle();
        }
        listDictionary.putBundle(String.format("%s", band), notificationBundle);
        notificationBundle = listDictionary;
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AllWifiAuthChannelChanged</code> of class <code>NetworkState</code> in project <code>JumpingSumo</code> is decoded
     */
    @Override
    public synchronized void onJumpingSumoNetworkStateAllWifiAuthChannelChangedUpdate ()
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerNetworkStateAllWifiAuthChannelChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerNetworkStateAllWifiAuthChannelChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerNetworkStateAllWifiAuthChannelChangedNotification);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>LinkQualityChanged</code> of class <code>NetworkState</code> in project <code>JumpingSumo</code> is decoded
     * @param quality The WiFi link quality in range 0-6, the higher the value, the higher the link quality.
     */
    @Override
    public synchronized void onJumpingSumoNetworkStateLinkQualityChangedUpdate (byte quality)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotificationQualityKey, quality);
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MasterVolumeChanged</code> of class <code>AudioSettingsState</code> in project <code>JumpingSumo</code> is decoded
     * @param volume Master audio volume [0:100].
     */
    @Override
    public synchronized void onJumpingSumoAudioSettingsStateMasterVolumeChangedUpdate (byte volume)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotificationVolumeKey, volume);
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ThemeChanged</code> of class <code>AudioSettingsState</code> in project <code>JumpingSumo</code> is decoded
     * @param theme The audio theme to set.
     */
    @Override
    public synchronized void onJumpingSumoAudioSettingsStateThemeChangedUpdate (ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_ENUM theme)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotificationThemeKey, (theme != null) ? theme.getValue() : ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_ENUM.ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_MAX.getValue());
        if (theme == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `theme` in ThemeChanged command from the device.");
        }
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ScriptMetadataListChanged</code> of class <code>RoadPlanState</code> in project <code>JumpingSumo</code> is decoded
     * @param uuid Script uuid for which metadata changed.
     * @param version Version number for this script.
     * @param product Product targeted by script.
     * @param name Display name of the script.
     * @param lastModified Timestamp relative to the UNIX epoch of the last time the file was modified.
     */
    @Override
    public synchronized void onJumpingSumoRoadPlanStateScriptMetadataListChangedUpdate (String uuid, byte version, String product, String name, long lastModified)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationUuidKey, uuid);
        notificationBundle.putByte(JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationVersionKey, version);
        notificationBundle.putString(JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationProductKey, product);
        notificationBundle.putString(JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationNameKey, name);
        notificationBundle.putLong(JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationLastModifiedKey, lastModified);
        
        Bundle listDictionary = notificationDictionary.getBundle( JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotification);
        if(listDictionary == null)
        {
            listDictionary = new Bundle();
        }
        listDictionary.putBundle(String.format("%s", uuid), notificationBundle);
        notificationBundle = listDictionary;
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AllScriptsMetadataChanged</code> of class <code>RoadPlanState</code> in project <code>JumpingSumo</code> is decoded
     */
    @Override
    public synchronized void onJumpingSumoRoadPlanStateAllScriptsMetadataChangedUpdate ()
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerRoadPlanStateAllScriptsMetadataChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerRoadPlanStateAllScriptsMetadataChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerRoadPlanStateAllScriptsMetadataChangedNotification);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ScriptUploadChanged</code> of class <code>RoadPlanState</code> in project <code>JumpingSumo</code> is decoded
     * @param resultCode Error code.
     */
    @Override
    public synchronized void onJumpingSumoRoadPlanStateScriptUploadChangedUpdate (ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ENUM resultCode)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotificationResultCodeKey, (resultCode != null) ? resultCode.getValue() : ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ENUM.ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_MAX.getValue());
        if (resultCode == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `resultCode` in ScriptUploadChanged command from the device.");
        }
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ScriptDeleteChanged</code> of class <code>RoadPlanState</code> in project <code>JumpingSumo</code> is decoded
     * @param resultCode Error code.
     */
    @Override
    public synchronized void onJumpingSumoRoadPlanStateScriptDeleteChangedUpdate (ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ENUM resultCode)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotificationResultCodeKey, (resultCode != null) ? resultCode.getValue() : ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ENUM.ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_MAX.getValue());
        if (resultCode == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `resultCode` in ScriptDeleteChanged command from the device.");
        }
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>PlayScriptChanged</code> of class <code>RoadPlanState</code> in project <code>JumpingSumo</code> is decoded
     * @param resultCode Error code.
     */
    @Override
    public synchronized void onJumpingSumoRoadPlanStatePlayScriptChangedUpdate (ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_ENUM resultCode)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotificationResultCodeKey, (resultCode != null) ? resultCode.getValue() : ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_ENUM.ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_MAX.getValue());
        if (resultCode == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `resultCode` in PlayScriptChanged command from the device.");
        }
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>OutdoorChanged</code> of class <code>SpeedSettingsState</code> in project <code>JumpingSumo</code> is decoded
     * @param outdoor 1 if outdoor, 0 if indoor
     */
    @Override
    public synchronized void onJumpingSumoSpeedSettingsStateOutdoorChangedUpdate (byte outdoor)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotificationOutdoorKey, outdoor);
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>VideoEnableChanged</code> of class <code>MediaStreamingState</code> in project <code>JumpingSumo</code> is decoded
     * @param enabled Current video streaming status.
     */
    @Override
    public synchronized void onJumpingSumoMediaStreamingStateVideoEnableChangedUpdate (ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENUM enabled)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotificationEnabledKey, (enabled != null) ? enabled.getValue() : ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENUM.ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_MAX.getValue());
        if (enabled == null)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Bad value for argument `enabled` in VideoEnableChanged command from the device.");
        }
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>UserScriptParsed</code> of class <code>UserScriptState</code> in project <code>JumpingSumo</code> is decoded
     * @param success Whether the script was loaded successfully (0 = failed, 1 = success).
     * @param message Error message.
     */
    @Override
    public synchronized void onJumpingSumoDebugUserScriptStateUserScriptParsedUpdate (byte success, String message)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationSuccessKey, success);
        notificationBundle.putString(JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationMessageKey, message);
        
        updateDictionary.putBundle(JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = jumpingSumoDeviceControllerAndLibARCommandsIntentCache.get(JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Send a command <code>PCMD</code> of class <code>Piloting</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param flag Boolean for "touch screen".
     * @param speed Speed value [-100:100].
     * @param turn Turn value. [-100:100]
     */
    protected boolean JumpingSumoDeviceController_SendPilotingPCMD (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte flag, byte speed, byte turn)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoPilotingPCMD (flag, speed, turn);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send PCMD command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Posture</code> of class <code>Piloting</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param type Type of Posture
     */
    protected boolean JumpingSumoDeviceController_SendPilotingPosture (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_ENUM type)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoPilotingPosture (type);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Posture command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>AddCapOffset</code> of class <code>Piloting</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param offset Offset value in radians.
     */
    protected boolean JumpingSumoDeviceController_SendPilotingAddCapOffset (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, float offset)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoPilotingAddCapOffset (offset);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send AddCapOffset command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>JumpStop</code> of class <code>Animations</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean JumpingSumoDeviceController_SendAnimationsJumpStop (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoAnimationsJumpStop ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send JumpStop command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>JumpCancel</code> of class <code>Animations</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean JumpingSumoDeviceController_SendAnimationsJumpCancel (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoAnimationsJumpCancel ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send JumpCancel command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>JumpLoad</code> of class <code>Animations</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean JumpingSumoDeviceController_SendAnimationsJumpLoad (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoAnimationsJumpLoad ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send JumpLoad command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Jump</code> of class <code>Animations</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param type Type of jump
     */
    protected boolean JumpingSumoDeviceController_SendAnimationsJump (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE_ENUM type)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoAnimationsJump (type);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Jump command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>SimpleAnimation</code> of class <code>Animations</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param id Animation ID.
     */
    protected boolean JumpingSumoDeviceController_SendAnimationsSimpleAnimation (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_ENUM id)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoAnimationsSimpleAnimation (id);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send SimpleAnimation command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Picture</code> of class <code>MediaRecord</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param mass_storage_id Mass storage id to take picture
     */
    protected boolean JumpingSumoDeviceController_SendMediaRecordPicture (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte mass_storage_id)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoMediaRecordPicture (mass_storage_id);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Picture command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Video</code> of class <code>MediaRecord</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param record Command to record video
     * @param mass_storage_id Mass storage id to record
     */
    protected boolean JumpingSumoDeviceController_SendMediaRecordVideo (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD_ENUM record, byte mass_storage_id)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoMediaRecordVideo (record, mass_storage_id);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Video command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>WifiSelection</code> of class <code>NetworkSettings</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param type The type of wifi selection (auto, manual)
     * @param band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
     * @param channel The channel (not used in auto mode)
     */
    protected boolean JumpingSumoDeviceController_SendNetworkSettingsWifiSelection (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE_ENUM type, ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_ENUM band, byte channel)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoNetworkSettingsWifiSelection (type, band, channel);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send WifiSelection command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>WifiScan</code> of class <code>Network</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param band The band(s) : 2.4 Ghz, 5 Ghz, or both
     */
    protected boolean JumpingSumoDeviceController_SendNetworkWifiScan (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_ENUM band)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoNetworkWifiScan (band);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send WifiScan command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>WifiAuthChannel</code> of class <code>Network</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean JumpingSumoDeviceController_SendNetworkWifiAuthChannel (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoNetworkWifiAuthChannel ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send WifiAuthChannel command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>MasterVolume</code> of class <code>AudioSettings</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param volume Master audio volume [0:100].
     */
    protected boolean JumpingSumoDeviceController_SendAudioSettingsMasterVolume (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte volume)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoAudioSettingsMasterVolume (volume);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send MasterVolume command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Theme</code> of class <code>AudioSettings</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param theme The audio theme to set.
     */
    protected boolean JumpingSumoDeviceController_SendAudioSettingsTheme (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_ENUM theme)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoAudioSettingsTheme (theme);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Theme command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>AllScriptsMetadata</code> of class <code>RoadPlan</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean JumpingSumoDeviceController_SendRoadPlanAllScriptsMetadata (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoRoadPlanAllScriptsMetadata ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send AllScriptsMetadata command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>ScriptUploaded</code> of class <code>RoadPlan</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param uuid UUID of uploaded file.
     * @param md5Hash MD5 hash code computed over file.
     */
    protected boolean JumpingSumoDeviceController_SendRoadPlanScriptUploaded (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, String uuid, String md5Hash)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoRoadPlanScriptUploaded (uuid, md5Hash);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send ScriptUploaded command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>ScriptDelete</code> of class <code>RoadPlan</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param uuid UUID of the file to delete.
     */
    protected boolean JumpingSumoDeviceController_SendRoadPlanScriptDelete (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, String uuid)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoRoadPlanScriptDelete (uuid);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send ScriptDelete command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>PlayScript</code> of class <code>RoadPlan</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param uuid UUID of the file to play.
     */
    protected boolean JumpingSumoDeviceController_SendRoadPlanPlayScript (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, String uuid)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoRoadPlanPlayScript (uuid);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send PlayScript command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Outdoor</code> of class <code>SpeedSettings</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param outdoor 1 if outdoor, 0 if indoor
     */
    protected boolean JumpingSumoDeviceController_SendSpeedSettingsOutdoor (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte outdoor)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoSpeedSettingsOutdoor (outdoor);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Outdoor command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>VideoEnable</code> of class <code>MediaStreaming</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param enable 1 to enable, 0 to disable.
     */
    protected boolean JumpingSumoDeviceController_SendMediaStreamingVideoEnable (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte enable)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoMediaStreamingVideoEnable (enable);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send VideoEnable command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>SetJumpMotor</code> of class <code>Jump</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param speed Jump motor speed value [-100:100].
     */
    protected boolean JumpingSumoDeviceController_SendJumpSetJumpMotor (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte speed)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoDebugJumpSetJumpMotor (speed);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send SetJumpMotor command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>SetCameraOrientation</code> of class <code>Jump</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param speedIncrement Orientation increment speed [-100:100].
     */
    protected boolean JumpingSumoDeviceController_SendJumpSetCameraOrientation (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte speedIncrement)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoDebugJumpSetCameraOrientation (speedIncrement);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send SetCameraOrientation command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>PlaySoundWithName</code> of class <code>Audio</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param filename Name of the file.
     */
    protected boolean JumpingSumoDeviceController_SendAudioPlaySoundWithName (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, String filename)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoDebugAudioPlaySoundWithName (filename);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send PlaySoundWithName command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>DebugEvent</code> of class <code>Misc</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean JumpingSumoDeviceController_SendMiscDebugEvent (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoDebugMiscDebugEvent ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send DebugEvent command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>PlayAnimation</code> of class <code>Animation</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param id Animation ID.
     */
    protected boolean JumpingSumoDeviceController_SendAnimationPlayAnimation (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_ENUM id)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoDebugAnimationPlayAnimation (id);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send PlayAnimation command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>AddCapOffset</code> of class <code>Animation</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param offset Offset value in radians.
     */
    protected boolean JumpingSumoDeviceController_SendAnimationAddCapOffset (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, float offset)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoDebugAnimationAddCapOffset (offset);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send AddCapOffset command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>UserScriptUploaded</code> of class <code>UserScript</code> in project <code>JumpingSumo</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean JumpingSumoDeviceController_SendUserScriptUserScriptUploaded (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setJumpingSumoDebugUserScriptUserScriptUploaded ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(JUMPINGSUMODEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send UserScriptUploaded command.");
        }
        
        return sentStatus;
    }
    
}

// END GENERATED CODE
