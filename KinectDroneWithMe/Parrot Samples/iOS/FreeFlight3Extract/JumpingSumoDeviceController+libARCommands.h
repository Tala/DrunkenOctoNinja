/*
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllerCategories.py script *
 *                                                        *
 **********************************************************/
#import <Foundation/Foundation.h>
#import <libARCommands/ARCommands.h>
#import <ARUtils/JumpingSumoDeviceController.h>
#import <ARUtils/JumpingSumoARNetworkConfig.h>

/*
 * State of posture changed.
 */
extern NSString *const JumpingSumoDeviceControllerPilotingStatePostureChangedNotification;
extern NSString *const JumpingSumoDeviceControllerPilotingStatePostureChangedNotificationStateKey; /* State of posture */
/*
 * JS alert state changed
 */
extern NSString *const JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotification;
extern NSString *const JumpingSumoDeviceControllerPilotingStateAlertStateChangedNotificationStateKey; /* JS alert state */
/*
 * State of jump load changed
 */
extern NSString *const JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotification;
extern NSString *const JumpingSumoDeviceControllerAnimationsStateJumpLoadChangedNotificationStateKey; /* State of jump load */
/*
 * Product GPS versions
 */
extern NSString *const JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotification;
extern NSString *const JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotificationSoftwareKey; /* Product GPS software version */
extern NSString *const JumpingSumoDeviceControllerSettingsStateProductGPSVersionChangedNotificationHardwareKey; /* Product GPS hardware version */
/*
 * State of picture recording
 */
extern NSString *const JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotification;
extern NSString *const JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotificationStateKey; /* 1 if picture has been taken, 0 otherwise */
extern NSString *const JumpingSumoDeviceControllerMediaRecordStatePictureStateChangedNotificationMass_storage_idKey; /* Mass storage id where the picture was recorded */
/*
 * State of video recording
 */
extern NSString *const JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotification;
extern NSString *const JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotificationStateKey; /* State of video */
extern NSString *const JumpingSumoDeviceControllerMediaRecordStateVideoStateChangedNotificationMass_storage_idKey; /* Mass storage id where the video was recorded */
/*
 * Wifi selection from product
 */
extern NSString *const JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotification;
extern NSString *const JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationTypeKey; /* The type of wifi selection settings */
extern NSString *const JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationBandKey; /* The actual  wifi band state */
extern NSString *const JumpingSumoDeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationChannelKey; /* The channel (depends of the band) */
/*
 * One scanning result found
 */
extern NSString *const JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotification;
extern NSString *const JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationSsidKey; /* SSID of the AP */
extern NSString *const JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationRssiKey; /* RSSI of the AP in dbm (negative value) */
extern NSString *const JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationBandKey; /* The band : 2.4 GHz or 5 GHz */
extern NSString *const JumpingSumoDeviceControllerNetworkStateWifiScanListChangedNotificationChannelKey; /* Channel of the AP */
/*
 * State sent when all scanning result sent
 */
extern NSString *const JumpingSumoDeviceControllerNetworkStateAllWifiScanChangedNotification;
/*
 * Notify of an Authorized Channel.
 */
extern NSString *const JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotification;
extern NSString *const JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationBandKey; /* The band of this channel : 2.4 GHz or 5 GHz */
extern NSString *const JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationChannelKey; /* The authorized channel. */
extern NSString *const JumpingSumoDeviceControllerNetworkStateWifiAuthChannelListChangedNotificationIn_or_outKey; /* Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise) */
/*
 * Notify the end of the list of Authorized wifi Channel.
 */
extern NSString *const JumpingSumoDeviceControllerNetworkStateAllWifiAuthChannelChangedNotification;
/*
 * Notification sent by the firmware to give an indication of the WiFi link quality.
 */
extern NSString *const JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotification;
extern NSString *const JumpingSumoDeviceControllerNetworkStateLinkQualityChangedNotificationQualityKey; /* The WiFi link quality in range 0-6, the higher the value, the higher the link quality. */
/*
 * Master volume control.
 */
extern NSString *const JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotification;
extern NSString *const JumpingSumoDeviceControllerAudioSettingsStateMasterVolumeChangedNotificationVolumeKey; /* Master audio volume [0:100]. */
/*
 * Command to notify controller of new Audio Theme.
 */
extern NSString *const JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotification;
extern NSString *const JumpingSumoDeviceControllerAudioSettingsStateThemeChangedNotificationThemeKey; /* The audio theme to set. */
/*
 * Update the controller with metadata.
 */
extern NSString *const JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotification;
extern NSString *const JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationUuidKey; /* Script uuid for which metadata changed. */
extern NSString *const JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationVersionKey; /* Version number for this script. */
extern NSString *const JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationProductKey; /* Product targeted by script. */
extern NSString *const JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationNameKey; /* Display name of the script. */
extern NSString *const JumpingSumoDeviceControllerRoadPlanStateScriptMetadataListChangedNotificationLastModifiedKey; /* Timestamp relative to the UNIX epoch of the last time the file was modified. */
/*
 * Notify controller that all script metadatas are updated.
 */
extern NSString *const JumpingSumoDeviceControllerRoadPlanStateAllScriptsMetadataChangedNotification;
/*
 * Device response to ScriptUploaded command.
 */
extern NSString *const JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotification;
extern NSString *const JumpingSumoDeviceControllerRoadPlanStateScriptUploadChangedNotificationResultCodeKey; /* Error code. */
/*
 * Device response to ScriptDelete command.
 */
extern NSString *const JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotification;
extern NSString *const JumpingSumoDeviceControllerRoadPlanStateScriptDeleteChangedNotificationResultCodeKey; /* Error code. */
/*
 * Device response to PlayScript command.
 */
extern NSString *const JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotification;
extern NSString *const JumpingSumoDeviceControllerRoadPlanStatePlayScriptChangedNotificationResultCodeKey; /* Error code. */
/*
 * Outdoor property sent by product => CAUTION : USED FOR WIFI, to know authorized wifi channels.
 */
extern NSString *const JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotification;
extern NSString *const JumpingSumoDeviceControllerSpeedSettingsStateOutdoorChangedNotificationOutdoorKey; /* 1 if outdoor, 0 if indoor */
/*
 * Return video streaming status.
 */
extern NSString *const JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotification;
extern NSString *const JumpingSumoDeviceControllerMediaStreamingStateVideoEnableChangedNotificationEnabledKey; /* Current video streaming status. */

@class JumpingSumoDeviceController;

@interface JumpingSumoDeviceController (libARCommands)
- (void)registerJumpingSumoARCommandsCallbacks;
- (void)unregisterJumpingSumoARCommandsCallbacks;
/* 
 * Ask the JS speed and turn ratio.
 */
- (BOOL)JumpingSumoDeviceController_SendPilotingPCMD:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withFlag:(uint8_t)flag withSpeed:(int8_t)speed withTurn:(int8_t)turn;
/* 
 * Request a posture
 */
- (BOOL)JumpingSumoDeviceController_SendPilotingPosture:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withType:(eARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE)type;
/* 
 * Add the specified offset to the current cap.
 */
- (BOOL)JumpingSumoDeviceController_SendPilotingAddCapOffset:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withOffset:(float)offset;
/* 
 * Stop jump, emergency jump stop, stop jump motor and stay there.
 */
- (BOOL)JumpingSumoDeviceController_SendAnimationsJumpStop:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
/* 
 * Cancel jump and come back to previous state (if possible).
 */
- (BOOL)JumpingSumoDeviceController_SendAnimationsJumpCancel:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
/* 
 * Request jump loading
 */
- (BOOL)JumpingSumoDeviceController_SendAnimationsJumpLoad:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
/* 
 * Request a jump
 */
- (BOOL)JumpingSumoDeviceController_SendAnimationsJump:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withType:(eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE)type;
/* 
 * Play a parameterless animation.
 */
- (BOOL)JumpingSumoDeviceController_SendAnimationsSimpleAnimation:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withId:(eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID)id;
/* 
 * Take picture
 */
- (BOOL)JumpingSumoDeviceController_SendMediaRecordPicture:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withMass_storage_id:(uint8_t)mass_storage_id;
/* 
 * Video record
 */
- (BOOL)JumpingSumoDeviceController_SendMediaRecordVideo:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withRecord:(eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD)record withMass_storage_id:(uint8_t)mass_storage_id;
/* 
 * Auto-select channel of choosen band
 */
- (BOOL)JumpingSumoDeviceController_SendNetworkSettingsWifiSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withType:(eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE)type withBand:(eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND)band withChannel:(uint8_t)channel;
/* 
 * Launches wifi network scan
 */
- (BOOL)JumpingSumoDeviceController_SendNetworkWifiScan:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withBand:(eARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND)band;
/* 
 * Controller inquire the list of authorized wifi channels.
 */
- (BOOL)JumpingSumoDeviceController_SendNetworkWifiAuthChannel:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
/* 
 * Master volume control.
 */
- (BOOL)JumpingSumoDeviceController_SendAudioSettingsMasterVolume:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withVolume:(uint8_t)volume;
/* 
 * Audio Theme.
 */
- (BOOL)JumpingSumoDeviceController_SendAudioSettingsTheme:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withTheme:(eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME)theme;
/* 
 * Command to ask device all metadata scripts.
 */
- (BOOL)JumpingSumoDeviceController_SendRoadPlanAllScriptsMetadata:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
/* 
 * Notify device that a new file has been uploaded.
 */
- (BOOL)JumpingSumoDeviceController_SendRoadPlanScriptUploaded:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withUuid:(char *)uuid withMd5Hash:(char *)md5Hash;
/* 
 * Ask the device to delete a script.
 */
- (BOOL)JumpingSumoDeviceController_SendRoadPlanScriptDelete:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withUuid:(char *)uuid;
/* 
 * Ask the device to play a script.
 */
- (BOOL)JumpingSumoDeviceController_SendRoadPlanPlayScript:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withUuid:(char *)uuid;
/* 
 * Outdoor property => CAUTION : USED FOR WIFI, to know authorized wifi channels.
 */
- (BOOL)JumpingSumoDeviceController_SendSpeedSettingsOutdoor:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withOutdoor:(uint8_t)outdoor;
/* 
 * Enable/disable video streaming.
 */
- (BOOL)JumpingSumoDeviceController_SendMediaStreamingVideoEnable:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withEnable:(uint8_t)enable;
@end

// END GENERATED CODE
