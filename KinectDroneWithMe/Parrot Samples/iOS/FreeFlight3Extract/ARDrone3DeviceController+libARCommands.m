/*
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllerCategories.py script *
 *                                                        *
 **********************************************************/
#import <libARSAL/ARSAL.h>
#import "DeviceControllerProtected.h"
#import "ARDrone3DeviceController+libARCommands.h"

NSString *const ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification = @"ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification";
NSString *const ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationStateKey = @"ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationStateKey";
NSString *const ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationMass_storage_idKey = @"ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationMass_storage_idKey";
NSString *const ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification = @"ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification";
NSString *const ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationStateKey = @"ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationStateKey";
NSString *const ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationMass_storage_idKey = @"ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationMass_storage_idKey";
NSString *const ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification = @"ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification = @"ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotificationStateKey = @"ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotificationStateKey";
NSString *const ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification = @"ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingStateAlertStateChangedNotificationStateKey = @"ARDrone3DeviceControllerPilotingStateAlertStateChangedNotificationStateKey";
NSString *const ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification = @"ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationStateKey = @"ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationStateKey";
NSString *const ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationReasonKey = @"ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationReasonKey";
NSString *const ARDrone3DeviceControllerPilotingStatePositionChangedNotification = @"ARDrone3DeviceControllerPilotingStatePositionChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLatitudeKey = @"ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLatitudeKey";
NSString *const ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLongitudeKey = @"ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLongitudeKey";
NSString *const ARDrone3DeviceControllerPilotingStatePositionChangedNotificationAltitudeKey = @"ARDrone3DeviceControllerPilotingStatePositionChangedNotificationAltitudeKey";
NSString *const ARDrone3DeviceControllerPilotingStateSpeedChangedNotification = @"ARDrone3DeviceControllerPilotingStateSpeedChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedXKey = @"ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedXKey";
NSString *const ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedYKey = @"ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedYKey";
NSString *const ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedZKey = @"ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedZKey";
NSString *const ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification = @"ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationRollKey = @"ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationRollKey";
NSString *const ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationPitchKey = @"ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationPitchKey";
NSString *const ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationYawKey = @"ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationYawKey";
NSString *const ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification = @"ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotificationStateKey = @"ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotificationStateKey";
NSString *const ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification = @"ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingStateAltitudeChangedNotificationAltitudeKey = @"ARDrone3DeviceControllerPilotingStateAltitudeChangedNotificationAltitudeKey";
NSString *const ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification = @"ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification";
NSString *const ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationSsidKey = @"ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationSsidKey";
NSString *const ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationRssiKey = @"ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationRssiKey";
NSString *const ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationBandKey = @"ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationBandKey";
NSString *const ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationChannelKey = @"ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationChannelKey";
NSString *const ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification = @"ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification";
NSString *const ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification = @"ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification";
NSString *const ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationBandKey = @"ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationBandKey";
NSString *const ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationChannelKey = @"ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationChannelKey";
NSString *const ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationIn_or_outKey = @"ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationIn_or_outKey";
NSString *const ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification = @"ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification = @"ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationCurrentKey = @"ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationCurrentKey";
NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMinKey = @"ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMinKey";
NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMaxKey = @"ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMaxKey";
NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification = @"ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationCurrentKey = @"ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationCurrentKey";
NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMinKey = @"ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMinKey";
NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMaxKey = @"ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMaxKey";
NSString *const ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification = @"ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification";
NSString *const ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotificationOnKey = @"ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotificationOnKey";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification = @"ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationCurrentKey = @"ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationCurrentKey";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMinKey = @"ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMinKey";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMaxKey = @"ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMaxKey";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification = @"ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationCurrentKey = @"ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationCurrentKey";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMinKey = @"ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMinKey";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMaxKey = @"ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMaxKey";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification = @"ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotificationPresentKey = @"ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotificationPresentKey";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification = @"ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification";
NSString *const ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotificationOutdoorKey = @"ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotificationOutdoorKey";
NSString *const ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification = @"ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification";
NSString *const ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationTypeKey = @"ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationTypeKey";
NSString *const ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationBandKey = @"ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationBandKey";
NSString *const ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationChannelKey = @"ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationChannelKey";
NSString *const ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification = @"ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification";
NSString *const ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationMotor_numberKey = @"ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationMotor_numberKey";
NSString *const ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationTypeKey = @"ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationTypeKey";
NSString *const ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationSoftwareKey = @"ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationSoftwareKey";
NSString *const ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationHardwareKey = @"ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationHardwareKey";
NSString *const ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification = @"ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification";
NSString *const ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationSoftwareKey = @"ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationSoftwareKey";
NSString *const ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationHardwareKey = @"ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationHardwareKey";
NSString *const ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification = @"ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification";
NSString *const ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorIdsKey = @"ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorIdsKey";
NSString *const ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorErrorKey = @"ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorErrorKey";
NSString *const ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification = @"ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification";
NSString *const ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotificationVersionKey = @"ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotificationVersionKey";
NSString *const ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification = @"ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification";
NSString *const ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationNbFlightsKey = @"ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationNbFlightsKey";
NSString *const ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationLastFlightDurationKey = @"ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationLastFlightDurationKey";
NSString *const ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationTotalFlightDurationKey = @"ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationTotalFlightDurationKey";
NSString *const ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification = @"ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification";
NSString *const ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotificationMotorErrorKey = @"ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotificationMotorErrorKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification = @"ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification";
NSString *const ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotificationTypeKey = @"ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotificationTypeKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification = @"ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification";
NSString *const ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotificationTypeKey = @"ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotificationTypeKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification = @"ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification";
NSString *const ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationValueKey = @"ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationValueKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMinKey = @"ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMinKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMaxKey = @"ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMaxKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification = @"ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification";
NSString *const ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationValueKey = @"ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationValueKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMinKey = @"ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMinKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMaxKey = @"ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMaxKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification = @"ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification";
NSString *const ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationEnabledKey = @"ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationEnabledKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationIntervalKey = @"ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationIntervalKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMinIntervalKey = @"ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMinIntervalKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMaxIntervalKey = @"ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMaxIntervalKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification = @"ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification";
NSString *const ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationEnabledKey = @"ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationEnabledKey";
NSString *const ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationMass_storage_idKey = @"ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationMass_storage_idKey";
NSString *const ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification = @"ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification";
NSString *const ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotificationEnabledKey = @"ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotificationEnabledKey";
NSString *const ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification = @"ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification";
NSString *const ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLatitudeKey = @"ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLatitudeKey";
NSString *const ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLongitudeKey = @"ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLongitudeKey";
NSString *const ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationAltitudeKey = @"ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationAltitudeKey";
NSString *const ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification = @"ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification";
NSString *const ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLatitudeKey = @"ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLatitudeKey";
NSString *const ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLongitudeKey = @"ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLongitudeKey";
NSString *const ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationAltitudeKey = @"ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationAltitudeKey";
NSString *const ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification = @"ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification";
NSString *const ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotificationFixedKey = @"ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotificationFixedKey";
NSString *const ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification = @"ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification";
NSString *const ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotificationStateKey = @"ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotificationStateKey";
NSString *const ARDrone3DeviceControllerCameraStateOrientationNotification = @"ARDrone3DeviceControllerCameraStateOrientationNotification";
NSString *const ARDrone3DeviceControllerCameraStateOrientationNotificationTiltKey = @"ARDrone3DeviceControllerCameraStateOrientationNotificationTiltKey";
NSString *const ARDrone3DeviceControllerCameraStateOrientationNotificationPanKey = @"ARDrone3DeviceControllerCameraStateOrientationNotificationPanKey";

@implementation ARDrone3DeviceController (libARCommands)
const char *ARDrone3DeviceController_TAG = "ARDrone3 DeviceController";

#pragma mark static C callback
static void ardrone3_mediarecordstate_picturestatechanged_callback(uint8_t state, uint8_t mass_storage_id, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedChar:state], [NSNumber numberWithUnsignedChar:mass_storage_id]] forKeys:@[ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationStateKey, ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationMass_storage_idKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification object:self userInfo:dict];
}

static void ardrone3_mediarecordstate_videostatechanged_callback(eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE state, uint8_t mass_storage_id, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithInt:state], [NSNumber numberWithUnsignedChar:mass_storage_id]] forKeys:@[ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationStateKey, ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationMass_storage_idKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingstate_flattrimchanged_callback(void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionary];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingstate_flyingstatechanged_callback(eARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE state, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithInt:state]] forKeys:@[ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotificationStateKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingstate_alertstatechanged_callback(eARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE state, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithInt:state]] forKeys:@[ARDrone3DeviceControllerPilotingStateAlertStateChangedNotificationStateKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingstate_navigatehomestatechanged_callback(eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE state, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON reason, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithInt:state], [NSNumber numberWithInt:reason]] forKeys:@[ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationStateKey, ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationReasonKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingstate_positionchanged_callback(double latitude, double longitude, double altitude, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithDouble:latitude], [NSNumber numberWithDouble:longitude], [NSNumber numberWithDouble:altitude]] forKeys:@[ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLatitudeKey, ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLongitudeKey, ARDrone3DeviceControllerPilotingStatePositionChangedNotificationAltitudeKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingStatePositionChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingStatePositionChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingStatePositionChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingstate_speedchanged_callback(float speedX, float speedY, float speedZ, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithFloat:speedX], [NSNumber numberWithFloat:speedY], [NSNumber numberWithFloat:speedZ]] forKeys:@[ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedXKey, ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedYKey, ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedZKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingStateSpeedChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingStateSpeedChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingStateSpeedChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingstate_attitudechanged_callback(float roll, float pitch, float yaw, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithFloat:roll], [NSNumber numberWithFloat:pitch], [NSNumber numberWithFloat:yaw]] forKeys:@[ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationRollKey, ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationPitchKey, ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationYawKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingstate_autotakeoffmodechanged_callback(uint8_t state, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedChar:state]] forKeys:@[ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotificationStateKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingstate_altitudechanged_callback(double altitude, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithDouble:altitude]] forKeys:@[ARDrone3DeviceControllerPilotingStateAltitudeChangedNotificationAltitudeKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification object:self userInfo:dict];
}

static void ardrone3_networkstate_wifiscanlistchanged_callback(char * ssid, int16_t rssi, eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND band, uint8_t channel, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSString stringWithCString:ssid encoding:NSUTF8StringEncoding], [NSNumber numberWithShort:rssi], [NSNumber numberWithInt:band], [NSNumber numberWithUnsignedChar:channel]] forKeys:@[ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationSsidKey, ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationRssiKey, ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationBandKey, ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationChannelKey]];
    NSMutableDictionary *listDictionary = [self.privateNotificationsDictionary objectForKey:ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification];
    if(listDictionary == nil)
    {
        listDictionary = [NSMutableDictionary dictionary];
    }
    [listDictionary setObject:dict forKey:[NSString stringWithCString:ssid encoding:NSUTF8StringEncoding]];
    dict = listDictionary;
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification object:self userInfo:dict];
}

static void ardrone3_networkstate_allwifiscanchanged_callback(void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionary];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification object:self userInfo:dict];
}

static void ardrone3_networkstate_wifiauthchannellistchanged_callback(eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND band, uint8_t channel, uint8_t in_or_out, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithInt:band], [NSNumber numberWithUnsignedChar:channel], [NSNumber numberWithUnsignedChar:in_or_out]] forKeys:@[ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationBandKey, ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationChannelKey, ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationIn_or_outKey]];
    NSMutableDictionary *listDictionary = [self.privateNotificationsDictionary objectForKey:ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification];
    if(listDictionary == nil)
    {
        listDictionary = [NSMutableDictionary dictionary];
    }
    [listDictionary setObject:dict forKey:[NSNumber numberWithInt:band]];
    dict = listDictionary;
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification object:self userInfo:dict];
}

static void ardrone3_networkstate_allwifiauthchannelchanged_callback(void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionary];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingsettingsstate_maxaltitudechanged_callback(float current, float min, float max, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithFloat:current], [NSNumber numberWithFloat:min], [NSNumber numberWithFloat:max]] forKeys:@[ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationCurrentKey, ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMinKey, ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMaxKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingsettingsstate_maxtiltchanged_callback(float current, float min, float max, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithFloat:current], [NSNumber numberWithFloat:min], [NSNumber numberWithFloat:max]] forKeys:@[ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationCurrentKey, ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMinKey, ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMaxKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification object:self userInfo:dict];
}

static void ardrone3_pilotingsettingsstate_absolutcontrolchanged_callback(uint8_t on, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedChar:on]] forKeys:@[ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotificationOnKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification object:self userInfo:dict];
}

static void ardrone3_speedsettingsstate_maxverticalspeedchanged_callback(float current, float min, float max, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithFloat:current], [NSNumber numberWithFloat:min], [NSNumber numberWithFloat:max]] forKeys:@[ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationCurrentKey, ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMinKey, ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMaxKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification object:self userInfo:dict];
}

static void ardrone3_speedsettingsstate_maxrotationspeedchanged_callback(float current, float min, float max, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithFloat:current], [NSNumber numberWithFloat:min], [NSNumber numberWithFloat:max]] forKeys:@[ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationCurrentKey, ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMinKey, ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMaxKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification object:self userInfo:dict];
}

static void ardrone3_speedsettingsstate_hullprotectionchanged_callback(uint8_t present, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedChar:present]] forKeys:@[ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotificationPresentKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification object:self userInfo:dict];
}

static void ardrone3_speedsettingsstate_outdoorchanged_callback(uint8_t outdoor, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedChar:outdoor]] forKeys:@[ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotificationOutdoorKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification object:self userInfo:dict];
}

static void ardrone3_networksettingsstate_wifiselectionchanged_callback(eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE type, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND band, uint8_t channel, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithInt:type], [NSNumber numberWithInt:band], [NSNumber numberWithUnsignedChar:channel]] forKeys:@[ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationTypeKey, ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationBandKey, ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationChannelKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification object:self userInfo:dict];
}

static void ardrone3_settingsstate_productmotorversionlistchanged_callback(uint8_t motor_number, char * type, char * software, char * hardware, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedChar:motor_number], [NSString stringWithCString:type encoding:NSUTF8StringEncoding], [NSString stringWithCString:software encoding:NSUTF8StringEncoding], [NSString stringWithCString:hardware encoding:NSUTF8StringEncoding]] forKeys:@[ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationMotor_numberKey, ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationTypeKey, ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationSoftwareKey, ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationHardwareKey]];
    NSMutableDictionary *listDictionary = [self.privateNotificationsDictionary objectForKey:ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification];
    if(listDictionary == nil)
    {
        listDictionary = [NSMutableDictionary dictionary];
    }
    [listDictionary setObject:dict forKey:[NSNumber numberWithUnsignedChar:motor_number]];
    dict = listDictionary;
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification object:self userInfo:dict];
}

static void ardrone3_settingsstate_productgpsversionchanged_callback(char * software, char * hardware, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSString stringWithCString:software encoding:NSUTF8StringEncoding], [NSString stringWithCString:hardware encoding:NSUTF8StringEncoding]] forKeys:@[ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationSoftwareKey, ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationHardwareKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification object:self userInfo:dict];
}

static void ardrone3_settingsstate_motorerrorstatechanged_callback(uint8_t motorIds, eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR motorError, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedChar:motorIds], [NSNumber numberWithInt:motorError]] forKeys:@[ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorIdsKey, ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorErrorKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification object:self userInfo:dict];
}

static void ardrone3_settingsstate_motorsoftwareversionchanged_callback(char * version, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSString stringWithCString:version encoding:NSUTF8StringEncoding]] forKeys:@[ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotificationVersionKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification object:self userInfo:dict];
}

static void ardrone3_settingsstate_motorflightsstatuschanged_callback(uint16_t nbFlights, uint16_t lastFlightDuration, uint32_t totalFlightDuration, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedShort:nbFlights], [NSNumber numberWithUnsignedShort:lastFlightDuration], [NSNumber numberWithUnsignedInt:totalFlightDuration]] forKeys:@[ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationNbFlightsKey, ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationLastFlightDurationKey, ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationTotalFlightDurationKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification object:self userInfo:dict];
}

static void ardrone3_settingsstate_motorerrorlasterrorchanged_callback(eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR motorError, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithInt:motorError]] forKeys:@[ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotificationMotorErrorKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification object:self userInfo:dict];
}

static void ardrone3_picturesettingsstate_pictureformatchanged_callback(eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE type, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithInt:type]] forKeys:@[ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotificationTypeKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification object:self userInfo:dict];
}

static void ardrone3_picturesettingsstate_autowhitebalancechanged_callback(eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE type, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithInt:type]] forKeys:@[ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotificationTypeKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification object:self userInfo:dict];
}

static void ardrone3_picturesettingsstate_expositionchanged_callback(float value, float min, float max, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithFloat:value], [NSNumber numberWithFloat:min], [NSNumber numberWithFloat:max]] forKeys:@[ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationValueKey, ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMinKey, ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMaxKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification object:self userInfo:dict];
}

static void ardrone3_picturesettingsstate_saturationchanged_callback(float value, float min, float max, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithFloat:value], [NSNumber numberWithFloat:min], [NSNumber numberWithFloat:max]] forKeys:@[ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationValueKey, ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMinKey, ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMaxKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification object:self userInfo:dict];
}

static void ardrone3_picturesettingsstate_timelapsechanged_callback(uint8_t enabled, float interval, float minInterval, float maxInterval, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedChar:enabled], [NSNumber numberWithFloat:interval], [NSNumber numberWithFloat:minInterval], [NSNumber numberWithFloat:maxInterval]] forKeys:@[ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationEnabledKey, ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationIntervalKey, ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMinIntervalKey, ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMaxIntervalKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification object:self userInfo:dict];
}

static void ardrone3_picturesettingsstate_videoautorecordchanged_callback(uint8_t enabled, uint8_t mass_storage_id, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedChar:enabled], [NSNumber numberWithUnsignedChar:mass_storage_id]] forKeys:@[ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationEnabledKey, ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationMass_storage_idKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification object:self userInfo:dict];
}

static void ardrone3_mediastreamingstate_videoenablechanged_callback(eARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED enabled, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithInt:enabled]] forKeys:@[ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotificationEnabledKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification object:self userInfo:dict];
}

static void ardrone3_gpssettingsstate_homechanged_callback(double latitude, double longitude, double altitude, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithDouble:latitude], [NSNumber numberWithDouble:longitude], [NSNumber numberWithDouble:altitude]] forKeys:@[ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLatitudeKey, ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLongitudeKey, ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationAltitudeKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification object:self userInfo:dict];
}

static void ardrone3_gpssettingsstate_resethomechanged_callback(double latitude, double longitude, double altitude, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithDouble:latitude], [NSNumber numberWithDouble:longitude], [NSNumber numberWithDouble:altitude]] forKeys:@[ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLatitudeKey, ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLongitudeKey, ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationAltitudeKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification object:self userInfo:dict];
}

static void ardrone3_gpssettingsstate_gpsfixstatechanged_callback(uint8_t fixed, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedChar:fixed]] forKeys:@[ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotificationFixedKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification object:self userInfo:dict];
}

static void ardrone3_gpssettingsstate_gpsupdatestatechanged_callback(eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE state, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithInt:state]] forKeys:@[ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotificationStateKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification object:self userInfo:dict];
}

static void ardrone3_camerastate_orientation_callback(int8_t tilt, int8_t pan, void *custom)
{
    ARDrone3DeviceController *self = (__bridge ARDrone3DeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithChar:tilt], [NSNumber numberWithChar:pan]] forKeys:@[ARDrone3DeviceControllerCameraStateOrientationNotificationTiltKey, ARDrone3DeviceControllerCameraStateOrientationNotificationPanKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:ARDrone3DeviceControllerCameraStateOrientationNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:ARDrone3DeviceControllerCameraStateOrientationNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ARDrone3DeviceControllerCameraStateOrientationNotification object:self userInfo:dict];
}


- (void)registerARDrone3ARCommandsCallbacks
{
    // Command class MediaRecordState
    ARCOMMANDS_Decoder_SetARDrone3MediaRecordStatePictureStateChangedCallback(ardrone3_mediarecordstate_picturestatechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3MediaRecordStateVideoStateChangedCallback(ardrone3_mediarecordstate_videostatechanged_callback, (__bridge void *)(self));
    // Command class Event
    // Command class PilotingState
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateFlatTrimChangedCallback(ardrone3_pilotingstate_flattrimchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateFlyingStateChangedCallback(ardrone3_pilotingstate_flyingstatechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateAlertStateChangedCallback(ardrone3_pilotingstate_alertstatechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateNavigateHomeStateChangedCallback(ardrone3_pilotingstate_navigatehomestatechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PilotingStatePositionChangedCallback(ardrone3_pilotingstate_positionchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateSpeedChangedCallback(ardrone3_pilotingstate_speedchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateAttitudeChangedCallback(ardrone3_pilotingstate_attitudechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateAutoTakeOffModeChangedCallback(ardrone3_pilotingstate_autotakeoffmodechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateAltitudeChangedCallback(ardrone3_pilotingstate_altitudechanged_callback, (__bridge void *)(self));
    // Command class NetworkState
    ARCOMMANDS_Decoder_SetARDrone3NetworkStateWifiScanListChangedCallback(ardrone3_networkstate_wifiscanlistchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3NetworkStateAllWifiScanChangedCallback(ardrone3_networkstate_allwifiscanchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3NetworkStateWifiAuthChannelListChangedCallback(ardrone3_networkstate_wifiauthchannellistchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3NetworkStateAllWifiAuthChannelChangedCallback(ardrone3_networkstate_allwifiauthchannelchanged_callback, (__bridge void *)(self));
    // Command class PilotingSettingsState
    ARCOMMANDS_Decoder_SetARDrone3PilotingSettingsStateMaxAltitudeChangedCallback(ardrone3_pilotingsettingsstate_maxaltitudechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PilotingSettingsStateMaxTiltChangedCallback(ardrone3_pilotingsettingsstate_maxtiltchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PilotingSettingsStateAbsolutControlChangedCallback(ardrone3_pilotingsettingsstate_absolutcontrolchanged_callback, (__bridge void *)(self));
    // Command class SpeedSettingsState
    ARCOMMANDS_Decoder_SetARDrone3SpeedSettingsStateMaxVerticalSpeedChangedCallback(ardrone3_speedsettingsstate_maxverticalspeedchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3SpeedSettingsStateMaxRotationSpeedChangedCallback(ardrone3_speedsettingsstate_maxrotationspeedchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3SpeedSettingsStateHullProtectionChangedCallback(ardrone3_speedsettingsstate_hullprotectionchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3SpeedSettingsStateOutdoorChangedCallback(ardrone3_speedsettingsstate_outdoorchanged_callback, (__bridge void *)(self));
    // Command class NetworkSettingsState
    ARCOMMANDS_Decoder_SetARDrone3NetworkSettingsStateWifiSelectionChangedCallback(ardrone3_networksettingsstate_wifiselectionchanged_callback, (__bridge void *)(self));
    // Command class SettingsState
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateProductMotorVersionListChangedCallback(ardrone3_settingsstate_productmotorversionlistchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateProductGPSVersionChangedCallback(ardrone3_settingsstate_productgpsversionchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateMotorErrorStateChangedCallback(ardrone3_settingsstate_motorerrorstatechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateMotorSoftwareVersionChangedCallback(ardrone3_settingsstate_motorsoftwareversionchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateMotorFlightsStatusChangedCallback(ardrone3_settingsstate_motorflightsstatuschanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateMotorErrorLastErrorChangedCallback(ardrone3_settingsstate_motorerrorlasterrorchanged_callback, (__bridge void *)(self));
    // Command class DirectorModeState
    // Command class PictureSettingsState
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStatePictureFormatChangedCallback(ardrone3_picturesettingsstate_pictureformatchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStateAutoWhiteBalanceChangedCallback(ardrone3_picturesettingsstate_autowhitebalancechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStateExpositionChangedCallback(ardrone3_picturesettingsstate_expositionchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStateSaturationChangedCallback(ardrone3_picturesettingsstate_saturationchanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStateTimelapseChangedCallback(ardrone3_picturesettingsstate_timelapsechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStateVideoAutorecordChangedCallback(ardrone3_picturesettingsstate_videoautorecordchanged_callback, (__bridge void *)(self));
    // Command class MediaStreamingState
    ARCOMMANDS_Decoder_SetARDrone3MediaStreamingStateVideoEnableChangedCallback(ardrone3_mediastreamingstate_videoenablechanged_callback, (__bridge void *)(self));
    // Command class GPSSettingsState
    ARCOMMANDS_Decoder_SetARDrone3GPSSettingsStateHomeChangedCallback(ardrone3_gpssettingsstate_homechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3GPSSettingsStateResetHomeChangedCallback(ardrone3_gpssettingsstate_resethomechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3GPSSettingsStateGPSFixStateChangedCallback(ardrone3_gpssettingsstate_gpsfixstatechanged_callback, (__bridge void *)(self));
    ARCOMMANDS_Decoder_SetARDrone3GPSSettingsStateGPSUpdateStateChangedCallback(ardrone3_gpssettingsstate_gpsupdatestatechanged_callback, (__bridge void *)(self));
    // Command class CameraState
    ARCOMMANDS_Decoder_SetARDrone3CameraStateOrientationCallback(ardrone3_camerastate_orientation_callback, (__bridge void *)(self));
}

- (void)unregisterARDrone3ARCommandsCallbacks
{
    // Command class MediaRecordState
    ARCOMMANDS_Decoder_SetARDrone3MediaRecordStatePictureStateChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3MediaRecordStateVideoStateChangedCallback(NULL, NULL);
    // Command class Event
    // Command class PilotingState
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateFlatTrimChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateFlyingStateChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateAlertStateChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateNavigateHomeStateChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PilotingStatePositionChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateSpeedChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateAttitudeChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateAutoTakeOffModeChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PilotingStateAltitudeChangedCallback(NULL, NULL);
    // Command class NetworkState
    ARCOMMANDS_Decoder_SetARDrone3NetworkStateWifiScanListChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3NetworkStateAllWifiScanChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3NetworkStateWifiAuthChannelListChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3NetworkStateAllWifiAuthChannelChangedCallback(NULL, NULL);
    // Command class PilotingSettingsState
    ARCOMMANDS_Decoder_SetARDrone3PilotingSettingsStateMaxAltitudeChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PilotingSettingsStateMaxTiltChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PilotingSettingsStateAbsolutControlChangedCallback(NULL, NULL);
    // Command class SpeedSettingsState
    ARCOMMANDS_Decoder_SetARDrone3SpeedSettingsStateMaxVerticalSpeedChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3SpeedSettingsStateMaxRotationSpeedChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3SpeedSettingsStateHullProtectionChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3SpeedSettingsStateOutdoorChangedCallback(NULL, NULL);
    // Command class NetworkSettingsState
    ARCOMMANDS_Decoder_SetARDrone3NetworkSettingsStateWifiSelectionChangedCallback(NULL, NULL);
    // Command class SettingsState
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateProductMotorVersionListChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateProductGPSVersionChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateMotorErrorStateChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateMotorSoftwareVersionChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateMotorFlightsStatusChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3SettingsStateMotorErrorLastErrorChangedCallback(NULL, NULL);
    // Command class DirectorModeState
    // Command class PictureSettingsState
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStatePictureFormatChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStateAutoWhiteBalanceChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStateExpositionChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStateSaturationChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStateTimelapseChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3PictureSettingsStateVideoAutorecordChangedCallback(NULL, NULL);
    // Command class MediaStreamingState
    ARCOMMANDS_Decoder_SetARDrone3MediaStreamingStateVideoEnableChangedCallback(NULL, NULL);
    // Command class GPSSettingsState
    ARCOMMANDS_Decoder_SetARDrone3GPSSettingsStateHomeChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3GPSSettingsStateResetHomeChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3GPSSettingsStateGPSFixStateChangedCallback(NULL, NULL);
    ARCOMMANDS_Decoder_SetARDrone3GPSSettingsStateGPSUpdateStateChangedCallback(NULL, NULL);
    // Command class CameraState
    ARCOMMANDS_Decoder_SetARDrone3CameraStateOrientationCallback(NULL, NULL);
}

#pragma mark ARCommands sending function 
    // Command class Piloting
- (BOOL)ARDrone3DeviceController_SendPilotingFlatTrim:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send FlatTrim command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PilotingFlatTrim(cmdbuf, sizeof(cmdbuf), &actualSize);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send FlatTrim command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPilotingTakeOff:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send TakeOff command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PilotingTakeOff(cmdbuf, sizeof(cmdbuf), &actualSize);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send TakeOff command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPilotingPCMD:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withFlag:(uint8_t)flag withRoll:(int8_t)roll withPitch:(int8_t)pitch withYaw:(int8_t)yaw withGaz:(int8_t)gaz withPsi:(float)psi
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send PCMD command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PilotingPCMD(cmdbuf, sizeof(cmdbuf), &actualSize, flag, roll, pitch, yaw, gaz, psi);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send PCMD command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPilotingLanding:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send Landing command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PilotingLanding(cmdbuf, sizeof(cmdbuf), &actualSize);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send Landing command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPilotingEmergency:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send Emergency command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PilotingEmergency(cmdbuf, sizeof(cmdbuf), &actualSize);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send Emergency command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPilotingNavigateHome:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withStart:(uint8_t)start
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send NavigateHome command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PilotingNavigateHome(cmdbuf, sizeof(cmdbuf), &actualSize, start);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send NavigateHome command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPilotingAutoTakeOffMode:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withState:(uint8_t)state
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send AutoTakeOffMode command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PilotingAutoTakeOffMode(cmdbuf, sizeof(cmdbuf), &actualSize, state);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send AutoTakeOffMode command.");
    }

    return sentStatus;
}
    // Command class Animations
- (BOOL)ARDrone3DeviceController_SendAnimationsFlip:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withDirection:(eARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION)direction
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send Flip command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3AnimationsFlip(cmdbuf, sizeof(cmdbuf), &actualSize, direction);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send Flip command.");
    }

    return sentStatus;
}
    // Command class Camera
- (BOOL)ARDrone3DeviceController_SendCameraOrientation:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withTilt:(int8_t)tilt withPan:(int8_t)pan
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send Orientation command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3CameraOrientation(cmdbuf, sizeof(cmdbuf), &actualSize, tilt, pan);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send Orientation command.");
    }

    return sentStatus;
}
    // Command class MediaRecord
- (BOOL)ARDrone3DeviceController_SendMediaRecordPicture:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withMass_storage_id:(uint8_t)mass_storage_id
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send Picture command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3MediaRecordPicture(cmdbuf, sizeof(cmdbuf), &actualSize, mass_storage_id);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send Picture command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendMediaRecordVideo:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withRecord:(eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD)record withMass_storage_id:(uint8_t)mass_storage_id
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send Video command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3MediaRecordVideo(cmdbuf, sizeof(cmdbuf), &actualSize, record, mass_storage_id);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send Video command.");
    }

    return sentStatus;
}
    // Command class Network
- (BOOL)ARDrone3DeviceController_SendNetworkWifiScan:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withBand:(eARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND)band
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send WifiScan command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3NetworkWifiScan(cmdbuf, sizeof(cmdbuf), &actualSize, band);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send WifiScan command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendNetworkWifiAuthChannel:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send WifiAuthChannel command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3NetworkWifiAuthChannel(cmdbuf, sizeof(cmdbuf), &actualSize);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send WifiAuthChannel command.");
    }

    return sentStatus;
}
    // Command class PilotingSettings
- (BOOL)ARDrone3DeviceController_SendPilotingSettingsMaxAltitude:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withCurrent:(float)current
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send MaxAltitude command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsMaxAltitude(cmdbuf, sizeof(cmdbuf), &actualSize, current);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send MaxAltitude command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPilotingSettingsMaxTilt:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withCurrent:(float)current
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send MaxTilt command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsMaxTilt(cmdbuf, sizeof(cmdbuf), &actualSize, current);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send MaxTilt command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPilotingSettingsAbsolutControl:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withOn:(uint8_t)on
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send AbsolutControl command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsAbsolutControl(cmdbuf, sizeof(cmdbuf), &actualSize, on);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send AbsolutControl command.");
    }

    return sentStatus;
}
    // Command class SpeedSettings
- (BOOL)ARDrone3DeviceController_SendSpeedSettingsMaxVerticalSpeed:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withCurrent:(float)current
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send MaxVerticalSpeed command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsMaxVerticalSpeed(cmdbuf, sizeof(cmdbuf), &actualSize, current);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send MaxVerticalSpeed command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendSpeedSettingsMaxRotationSpeed:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withCurrent:(float)current
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send MaxRotationSpeed command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsMaxRotationSpeed(cmdbuf, sizeof(cmdbuf), &actualSize, current);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send MaxRotationSpeed command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendSpeedSettingsHullProtection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withPresent:(uint8_t)present
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send HullProtection command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsHullProtection(cmdbuf, sizeof(cmdbuf), &actualSize, present);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send HullProtection command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendSpeedSettingsOutdoor:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withOutdoor:(uint8_t)outdoor
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send Outdoor command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsOutdoor(cmdbuf, sizeof(cmdbuf), &actualSize, outdoor);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send Outdoor command.");
    }

    return sentStatus;
}
    // Command class NetworkSettings
- (BOOL)ARDrone3DeviceController_SendNetworkSettingsWifiSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withType:(eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE)type withBand:(eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND)band withChannel:(uint8_t)channel
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send WifiSelection command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3NetworkSettingsWifiSelection(cmdbuf, sizeof(cmdbuf), &actualSize, type, band, channel);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send WifiSelection command.");
    }

    return sentStatus;
}
    // Command class Settings
    // Command class DirectorMode
    // Command class PictureSettings
- (BOOL)ARDrone3DeviceController_SendPictureSettingsPictureFormatSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withType:(eARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE)type
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send PictureFormatSelection command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsPictureFormatSelection(cmdbuf, sizeof(cmdbuf), &actualSize, type);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send PictureFormatSelection command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPictureSettingsAutoWhiteBalanceSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withType:(eARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE)type
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send AutoWhiteBalanceSelection command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsAutoWhiteBalanceSelection(cmdbuf, sizeof(cmdbuf), &actualSize, type);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send AutoWhiteBalanceSelection command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPictureSettingsExpositionSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withValue:(float)value
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send ExpositionSelection command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsExpositionSelection(cmdbuf, sizeof(cmdbuf), &actualSize, value);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send ExpositionSelection command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPictureSettingsSaturationSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withValue:(float)value
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send SaturationSelection command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsSaturationSelection(cmdbuf, sizeof(cmdbuf), &actualSize, value);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send SaturationSelection command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPictureSettingsTimelapseSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withEnabled:(uint8_t)enabled withInterval:(float)interval
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send TimelapseSelection command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsTimelapseSelection(cmdbuf, sizeof(cmdbuf), &actualSize, enabled, interval);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send TimelapseSelection command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendPictureSettingsVideoAutorecordSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withEnabled:(uint8_t)enabled withMass_storage_id:(uint8_t)mass_storage_id
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send VideoAutorecordSelection command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsVideoAutorecordSelection(cmdbuf, sizeof(cmdbuf), &actualSize, enabled, mass_storage_id);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send VideoAutorecordSelection command.");
    }

    return sentStatus;
}
    // Command class MediaStreaming
- (BOOL)ARDrone3DeviceController_SendMediaStreamingVideoEnable:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withEnable:(uint8_t)enable
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send VideoEnable command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3MediaStreamingVideoEnable(cmdbuf, sizeof(cmdbuf), &actualSize, enable);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send VideoEnable command.");
    }

    return sentStatus;
}
    // Command class GPSSettings
- (BOOL)ARDrone3DeviceController_SendGPSSettingsSetHome:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withLatitude:(double)latitude withLongitude:(double)longitude withAltitude:(double)altitude
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send SetHome command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsSetHome(cmdbuf, sizeof(cmdbuf), &actualSize, latitude, longitude, altitude);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send SetHome command.");
    }

    return sentStatus;
}
- (BOOL)ARDrone3DeviceController_SendGPSSettingsResetHome:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send ResetHome command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsResetHome(cmdbuf, sizeof(cmdbuf), &actualSize);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, ARDrone3DeviceController_TAG, "Failed to send ResetHome command.");
    }

    return sentStatus;
}
@end

// END GENERATED CODE
