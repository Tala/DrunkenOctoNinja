/*
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllerCategories.py script *
 *                                                        *
 **********************************************************/
#import <Foundation/Foundation.h>
#import <libARCommands/ARCommands.h>
#import <ARUtils/ARDrone3DeviceController.h>
#import <ARUtils/ARDrone3ARNetworkConfig.h>

/*
 * State of picture recording
 */
extern NSString *const ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotification;
extern NSString *const ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationStateKey; /* 1 if picture has been taken, 0 otherwise */
extern NSString *const ARDrone3DeviceControllerMediaRecordStatePictureStateChangedNotificationMass_storage_idKey; /* Mass storage id where the picture was recorded */
/*
 * State of video recording
 */
extern NSString *const ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotification;
extern NSString *const ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationStateKey; /* State of video */
extern NSString *const ARDrone3DeviceControllerMediaRecordStateVideoStateChangedNotificationMass_storage_idKey; /* Mass storage id where the video was recorded */
/*
 * Drone acknowledges that flat trim was correctly processed
 */
extern NSString *const ARDrone3DeviceControllerPilotingStateFlatTrimChangedNotification;
/*
 * Drone flying state changed
 */
extern NSString *const ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotification;
extern NSString *const ARDrone3DeviceControllerPilotingStateFlyingStateChangedNotificationStateKey; /* Drone flying state */
/*
 * Drone alert state changed
 */
extern NSString *const ARDrone3DeviceControllerPilotingStateAlertStateChangedNotification;
extern NSString *const ARDrone3DeviceControllerPilotingStateAlertStateChangedNotificationStateKey; /* Drone alert state */
/*
 * Navigating home state
 */
extern NSString *const ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotification;
extern NSString *const ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationStateKey; /* State of navigate home */
extern NSString *const ARDrone3DeviceControllerPilotingStateNavigateHomeStateChangedNotificationReasonKey; /* Reason of the state */
/*
 * Drone position changed
 */
extern NSString *const ARDrone3DeviceControllerPilotingStatePositionChangedNotification;
extern NSString *const ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLatitudeKey; /* Latitude position in decimal degrees (500.0 if not available) */
extern NSString *const ARDrone3DeviceControllerPilotingStatePositionChangedNotificationLongitudeKey; /* Longitude position in decimal degrees (500.0 if not available) */
extern NSString *const ARDrone3DeviceControllerPilotingStatePositionChangedNotificationAltitudeKey; /* Altitude in meters (from GPS) */
/*
 * Drone speed changed
 */
extern NSString *const ARDrone3DeviceControllerPilotingStateSpeedChangedNotification;
extern NSString *const ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedXKey; /* Speed on the x axis (when drone moves forward, speed is > 0) (in m/s) */
extern NSString *const ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedYKey; /* Speed on the y axis (when drone moves to right, speed is > 0) (in m/s) */
extern NSString *const ARDrone3DeviceControllerPilotingStateSpeedChangedNotificationSpeedZKey; /* Speed on the z axis (when drone moves down, speed is > 0) (in m/s) */
/*
 * Drone attitude changed
 */
extern NSString *const ARDrone3DeviceControllerPilotingStateAttitudeChangedNotification;
extern NSString *const ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationRollKey; /* roll value (in radian) */
extern NSString *const ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationPitchKey; /* Pitch value (in radian) */
extern NSString *const ARDrone3DeviceControllerPilotingStateAttitudeChangedNotificationYawKey; /* Yaw value (in radian) */
/*
 * Status of the drone3 automatic take off mode
 */
extern NSString *const ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotification;
extern NSString *const ARDrone3DeviceControllerPilotingStateAutoTakeOffModeChangedNotificationStateKey; /* State of automatic take off mode (1 if enabled) */
/*
 * Drone altitude changed
 */
extern NSString *const ARDrone3DeviceControllerPilotingStateAltitudeChangedNotification;
extern NSString *const ARDrone3DeviceControllerPilotingStateAltitudeChangedNotificationAltitudeKey; /* Altitude in meters */
/*
 * One scanning result found
 */
extern NSString *const ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotification;
extern NSString *const ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationSsidKey; /* SSID of the AP */
extern NSString *const ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationRssiKey; /* RSSI of the AP in dbm (negative value) */
extern NSString *const ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationBandKey; /* The band : 2.4 GHz or 5 GHz */
extern NSString *const ARDrone3DeviceControllerNetworkStateWifiScanListChangedNotificationChannelKey; /* Channel of the AP */
/*
 * State sent when all scanning result sent
 */
extern NSString *const ARDrone3DeviceControllerNetworkStateAllWifiScanChangedNotification;
/*
 * Notify of an Authorized Channel.
 */
extern NSString *const ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotification;
extern NSString *const ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationBandKey; /* The band of this channel : 2.4 GHz or 5 GHz */
extern NSString *const ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationChannelKey; /* The authorized channel. */
extern NSString *const ARDrone3DeviceControllerNetworkStateWifiAuthChannelListChangedNotificationIn_or_outKey; /* Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise) */
/*
 * Notify the end of the list of Authorized wifi Channel.
 */
extern NSString *const ARDrone3DeviceControllerNetworkStateAllWifiAuthChannelChangedNotification;
/*
 * Max Altitude sent by product
 */
extern NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotification;
extern NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationCurrentKey; /* Current altitude max */
extern NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMinKey; /* Range min of altitude */
extern NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxAltitudeChangedNotificationMaxKey; /* Range max of altitude */
/*
 * Max tilt sent by product
 */
extern NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotification;
extern NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationCurrentKey; /* Current max tilt */
extern NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMinKey; /* Range min of tilt */
extern NSString *const ARDrone3DeviceControllerPilotingSettingsStateMaxTiltChangedNotificationMaxKey; /* Range max of tilt */
/*
 * Absolut control boolean sent by product
 */
extern NSString *const ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotification;
extern NSString *const ARDrone3DeviceControllerPilotingSettingsStateAbsolutControlChangedNotificationOnKey; /* 1 if enabled, 0 if disabled */
/*
 * Max vertical speed sent by product
 */
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotification;
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationCurrentKey; /* Current max vertical speed in m/s */
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMinKey; /* Range min of vertical speed */
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxVerticalSpeedChangedNotificationMaxKey; /* Range max of vertical speed */
/*
 * Max rotation speed sent by product
 */
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotification;
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationCurrentKey; /* Current max rotation speed in degree/s */
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMinKey; /* Range min of rotation speed */
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateMaxRotationSpeedChangedNotificationMaxKey; /* Range max of rotation speed */
/*
 * Presence of hull protection sent by product
 */
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotification;
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateHullProtectionChangedNotificationPresentKey; /* 1 if present, 0 if not present */
/*
 * Outdoor property sent by product
 */
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotification;
extern NSString *const ARDrone3DeviceControllerSpeedSettingsStateOutdoorChangedNotificationOutdoorKey; /* 1 if outdoor flight, 0 if indoor flight */
/*
 * Wifi selection from product
 */
extern NSString *const ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotification;
extern NSString *const ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationTypeKey; /* The type of wifi selection settings */
extern NSString *const ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationBandKey; /* The actual  wifi band state */
extern NSString *const ARDrone3DeviceControllerNetworkSettingsStateWifiSelectionChangedNotificationChannelKey; /* The channel (depends of the band) */
/*
 * DEPRECATED Product Motor version (the first argument is the unique identifier for the list)
 */
extern NSString *const ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotification;
extern NSString *const ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationMotor_numberKey; /* Product Motor number */
extern NSString *const ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationTypeKey; /* Product Motor type */
extern NSString *const ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationSoftwareKey; /* Product Motors software version */
extern NSString *const ARDrone3DeviceControllerSettingsStateProductMotorVersionListChangedNotificationHardwareKey; /* Product Motors hardware version */
/*
 * Product GPS versions
 */
extern NSString *const ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotification;
extern NSString *const ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationSoftwareKey; /* Product GPS software version */
extern NSString *const ARDrone3DeviceControllerSettingsStateProductGPSVersionChangedNotificationHardwareKey; /* Product GPS hardware version */
/*
 * Motor status changed
 */
extern NSString *const ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotification;
extern NSString *const ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorIdsKey; /* Bit field for concerned motor. If bit 0 = 1, motor 1 is affected by this error. Same with bit 1, 2 and 3. */
extern NSString *const ARDrone3DeviceControllerSettingsStateMotorErrorStateChangedNotificationMotorErrorKey; /* Enumeration of the motor error */
/*
 * Motor software version status
 */
extern NSString *const ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotification;
extern NSString *const ARDrone3DeviceControllerSettingsStateMotorSoftwareVersionChangedNotificationVersionKey; /* name of the version : dot separated fields (major version - minor version - firmware type - nb motors handled). Firmware types : Release, Debug, Alpha, Test-bench */
/*
 * Motor flights status
 */
extern NSString *const ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotification;
extern NSString *const ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationNbFlightsKey; /* total number of flights */
extern NSString *const ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationLastFlightDurationKey; /* Duration of the last flight (in seconds) */
extern NSString *const ARDrone3DeviceControllerSettingsStateMotorFlightsStatusChangedNotificationTotalFlightDurationKey; /* Duration of all flights (in seconds) */
/*
 * Motor status about last error
 */
extern NSString *const ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotification;
extern NSString *const ARDrone3DeviceControllerSettingsStateMotorErrorLastErrorChangedNotificationMotorErrorKey; /* Enumeration of the motor error */
/*
 * The format of the photo
 */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotification;
extern NSString *const ARDrone3DeviceControllerPictureSettingsStatePictureFormatChangedNotificationTypeKey; /* The type of photo format */
/*
 * AutoWhiteBalance mode
 */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotification;
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateAutoWhiteBalanceChangedNotificationTypeKey; /* The type auto white balance */
/*
 * The exposition of the image
 */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotification;
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationValueKey; /* Exposition value */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMinKey; /* Min exposition value */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateExpositionChangedNotificationMaxKey; /* Max exposition value */
/*
 * The saturation of the image
 */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotification;
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationValueKey; /* Saturation value */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMinKey; /* Min saturation value */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateSaturationChangedNotificationMaxKey; /* Max saturation value */
/*
 * Picture taken periodically
 */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotification;
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationEnabledKey; /* 1 if timelapse is enabled, 0 otherwise */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationIntervalKey; /* interval in seconds for taking pictures */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMinIntervalKey; /* Minimal interval for taking pictures */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateTimelapseChangedNotificationMaxIntervalKey; /* Maximal interval for taking pictures */
/*
 * Video autorecord
 */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotification;
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationEnabledKey; /* 1 if video autorecord is enabled, 0 otherwise */
extern NSString *const ARDrone3DeviceControllerPictureSettingsStateVideoAutorecordChangedNotificationMass_storage_idKey; /* Mass storage id for the taken video */
/*
 * Return video streaming status.
 */
extern NSString *const ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotification;
extern NSString *const ARDrone3DeviceControllerMediaStreamingStateVideoEnableChangedNotificationEnabledKey; /* Current video streaming status. */
/*
 * Return home status
 */
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotification;
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLatitudeKey; /* Home latitude in decimal degrees */
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationLongitudeKey; /* Home longitude in decimal degrees */
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateHomeChangedNotificationAltitudeKey; /* Home altitude in meters */
/*
 * Reset home status
 */
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotification;
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLatitudeKey; /* Home latitude in decimal degrees */
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationLongitudeKey; /* Home longitude in decimal degrees */
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateResetHomeChangedNotificationAltitudeKey; /* Home altitude in meters */
/*
 * GPS fix state
 */
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotification;
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateGPSFixStateChangedNotificationFixedKey; /* 1 if gps on drone is fixed, 0 otherwise */
/*
 * GPS update state
 */
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotification;
extern NSString *const ARDrone3DeviceControllerGPSSettingsStateGPSUpdateStateChangedNotificationStateKey; /* The state of the gps update */
/*
 * Camera orientation
 */
extern NSString *const ARDrone3DeviceControllerCameraStateOrientationNotification;
extern NSString *const ARDrone3DeviceControllerCameraStateOrientationNotificationTiltKey; /* Tilt camera consign for the drone [-100;100] */
extern NSString *const ARDrone3DeviceControllerCameraStateOrientationNotificationPanKey; /* Pan camera consign for the drone [-100;100] */

@class ARDrone3DeviceController;

@interface ARDrone3DeviceController (libARCommands)
- (void)registerARDrone3ARCommandsCallbacks;
- (void)unregisterARDrone3ARCommandsCallbacks;
/* 
 * Do a flat trim
 */
- (BOOL)ARDrone3DeviceController_SendPilotingFlatTrim:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
/* 
 * Ask the drone to take off
 */
- (BOOL)ARDrone3DeviceController_SendPilotingTakeOff:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
/* 
 * Ask the drone to move around.
 */
- (BOOL)ARDrone3DeviceController_SendPilotingPCMD:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withFlag:(uint8_t)flag withRoll:(int8_t)roll withPitch:(int8_t)pitch withYaw:(int8_t)yaw withGaz:(int8_t)gaz withPsi:(float)psi;
/* 
 * Ask the drone to land
 */
- (BOOL)ARDrone3DeviceController_SendPilotingLanding:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
/* 
 * Put drone in emergency user state
 */
- (BOOL)ARDrone3DeviceController_SendPilotingEmergency:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
/* 
 * Ask the drone to fly to home
 */
- (BOOL)ARDrone3DeviceController_SendPilotingNavigateHome:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withStart:(uint8_t)start;
/* 
 * Set Drone3 in automatic take off mode
 */
- (BOOL)ARDrone3DeviceController_SendPilotingAutoTakeOffMode:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withState:(uint8_t)state;
/* 
 * Make a flip
 */
- (BOOL)ARDrone3DeviceController_SendAnimationsFlip:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withDirection:(eARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION)direction;
/* 
 * Ask the drone to move camera.
 */
- (BOOL)ARDrone3DeviceController_SendCameraOrientation:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withTilt:(int8_t)tilt withPan:(int8_t)pan;
/* 
 * Take picture
 */
- (BOOL)ARDrone3DeviceController_SendMediaRecordPicture:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withMass_storage_id:(uint8_t)mass_storage_id;
/* 
 * Video record
 */
- (BOOL)ARDrone3DeviceController_SendMediaRecordVideo:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withRecord:(eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD)record withMass_storage_id:(uint8_t)mass_storage_id;
/* 
 * Launches wifi network scan
 */
- (BOOL)ARDrone3DeviceController_SendNetworkWifiScan:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withBand:(eARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND)band;
/* 
 * Controller inquire the list of authorized wifi channels.
 */
- (BOOL)ARDrone3DeviceController_SendNetworkWifiAuthChannel:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
/* 
 * Set Max Altitude
 */
- (BOOL)ARDrone3DeviceController_SendPilotingSettingsMaxAltitude:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withCurrent:(float)current;
/* 
 * Set Max Tilt
 */
- (BOOL)ARDrone3DeviceController_SendPilotingSettingsMaxTilt:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withCurrent:(float)current;
/* 
 * Enable/Disable absolut control
 */
- (BOOL)ARDrone3DeviceController_SendPilotingSettingsAbsolutControl:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withOn:(uint8_t)on;
/* 
 * Set Max Vertical speed
 */
- (BOOL)ARDrone3DeviceController_SendSpeedSettingsMaxVerticalSpeed:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withCurrent:(float)current;
/* 
 * Set Max Rotation speed
 */
- (BOOL)ARDrone3DeviceController_SendSpeedSettingsMaxRotationSpeed:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withCurrent:(float)current;
/* 
 * Presence of hull protection
 */
- (BOOL)ARDrone3DeviceController_SendSpeedSettingsHullProtection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withPresent:(uint8_t)present;
/* 
 * Outdoor property
 */
- (BOOL)ARDrone3DeviceController_SendSpeedSettingsOutdoor:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withOutdoor:(uint8_t)outdoor;
/* 
 * Auto-select channel of choosen band
 */
- (BOOL)ARDrone3DeviceController_SendNetworkSettingsWifiSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withType:(eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE)type withBand:(eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND)band withChannel:(uint8_t)channel;
/* 
 * The format of the photo
 */
- (BOOL)ARDrone3DeviceController_SendPictureSettingsPictureFormatSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withType:(eARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE)type;
/* 
 * AutoWhiteBalance mode
 */
- (BOOL)ARDrone3DeviceController_SendPictureSettingsAutoWhiteBalanceSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withType:(eARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE)type;
/* 
 * The exposition of the image
 */
- (BOOL)ARDrone3DeviceController_SendPictureSettingsExpositionSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withValue:(float)value;
/* 
 * The saturation of the image
 */
- (BOOL)ARDrone3DeviceController_SendPictureSettingsSaturationSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withValue:(float)value;
/* 
 * Picture taken periodically
 */
- (BOOL)ARDrone3DeviceController_SendPictureSettingsTimelapseSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withEnabled:(uint8_t)enabled withInterval:(float)interval;
/* 
 * Video autorecord
 */
- (BOOL)ARDrone3DeviceController_SendPictureSettingsVideoAutorecordSelection:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withEnabled:(uint8_t)enabled withMass_storage_id:(uint8_t)mass_storage_id;
/* 
 * Enable/disable video streaming.
 */
- (BOOL)ARDrone3DeviceController_SendMediaStreamingVideoEnable:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withEnable:(uint8_t)enable;
/* 
 * Set home location
 */
- (BOOL)ARDrone3DeviceController_SendGPSSettingsSetHome:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withLatitude:(double)latitude withLongitude:(double)longitude withAltitude:(double)altitude;
/* 
 * Reset home location and let the drone make its own home
 */
- (BOOL)ARDrone3DeviceController_SendGPSSettingsResetHome:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
@end

// END GENERATED CODE
