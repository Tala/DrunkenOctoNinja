/*
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllerCategories.py script *
 *                                                        *
 **********************************************************/
#import <libARSAL/ARSAL.h>
#import "DeviceControllerProtected.h"
#import "JumpingSumoDeviceController+libARCommandsDebug.h"
#ifdef ARCOMMANDS_HAS_DEBUG_COMMANDS

NSString *const JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification = @"JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification";
NSString *const JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationSuccessKey = @"JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationSuccessKey";
NSString *const JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationMessageKey = @"JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationMessageKey";

@implementation JumpingSumoDeviceController (libARCommandsDebug)
const char *JumpingSumoDeviceControllerDebug_TAG = "JumpingSumo DeviceController";

#pragma mark static C callback
static void jumpingsumodebug_userscriptstate_userscriptparsed_callback(uint8_t success, char * message, void *custom)
{
    JumpingSumoDeviceController *self = (__bridge JumpingSumoDeviceController*)custom;
    NSDictionary* dict = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithUnsignedChar:success], [NSString stringWithCString:message encoding:NSUTF8StringEncoding]] forKeys:@[JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationSuccessKey, JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationMessageKey]];
    [self.privateNotificationsDictionary setObject:dict forKey:JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification];
    [[NSNotificationCenter defaultCenter] postNotificationName:DeviceControllerNotificationsDictionaryChanged object:self userInfo:[NSDictionary dictionaryWithObject:dict forKey:JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification]];
    [[NSNotificationCenter defaultCenter] postNotificationName:JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification object:self userInfo:dict];
}


- (void)registerJumpingSumoDebugARCommandsCallbacks
{
    // Command class UserScriptState
    ARCOMMANDS_Decoder_SetJumpingSumoDebugUserScriptStateUserScriptParsedCallback(jumpingsumodebug_userscriptstate_userscriptparsed_callback, (__bridge void *)(self));
}

- (void)unregisterJumpingSumoDebugARCommandsCallbacks
{
    // Command class UserScriptState
    ARCOMMANDS_Decoder_SetJumpingSumoDebugUserScriptStateUserScriptParsedCallback(NULL, NULL);
}

#pragma mark ARCommands sending function 
    // Command class Jump
- (BOOL)JumpingSumoDeviceController_SendJumpSetJumpMotor:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withSpeed:(int8_t)speed
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send SetJumpMotor command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateJumpingSumoDebugJumpSetJumpMotor(cmdbuf, sizeof(cmdbuf), &actualSize, speed);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, JumpingSumoDeviceControllerDebug_TAG, "Failed to send SetJumpMotor command.");
    }

    return sentStatus;
}
- (BOOL)JumpingSumoDeviceController_SendJumpSetCameraOrientation:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withSpeedIncrement:(int8_t)speedIncrement
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send SetCameraOrientation command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateJumpingSumoDebugJumpSetCameraOrientation(cmdbuf, sizeof(cmdbuf), &actualSize, speedIncrement);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, JumpingSumoDeviceControllerDebug_TAG, "Failed to send SetCameraOrientation command.");
    }

    return sentStatus;
}
    // Command class Audio
- (BOOL)JumpingSumoDeviceController_SendAudioPlaySoundWithName:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withFilename:(char *)filename
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send PlaySoundWithName command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateJumpingSumoDebugAudioPlaySoundWithName(cmdbuf, sizeof(cmdbuf), &actualSize, filename);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, JumpingSumoDeviceControllerDebug_TAG, "Failed to send PlaySoundWithName command.");
    }

    return sentStatus;
}
    // Command class Misc
- (BOOL)JumpingSumoDeviceController_SendMiscDebugEvent:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send DebugEvent command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateJumpingSumoDebugMiscDebugEvent(cmdbuf, sizeof(cmdbuf), &actualSize);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, JumpingSumoDeviceControllerDebug_TAG, "Failed to send DebugEvent command.");
    }

    return sentStatus;
}
    // Command class Animation
- (BOOL)JumpingSumoDeviceController_SendAnimationPlayAnimation:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withId:(eARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID)id
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send PlayAnimation command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateJumpingSumoDebugAnimationPlayAnimation(cmdbuf, sizeof(cmdbuf), &actualSize, id);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, JumpingSumoDeviceControllerDebug_TAG, "Failed to send PlayAnimation command.");
    }

    return sentStatus;
}
- (BOOL)JumpingSumoDeviceController_SendAnimationAddCapOffset:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withOffset:(float)offset
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send AddCapOffset command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateJumpingSumoDebugAnimationAddCapOffset(cmdbuf, sizeof(cmdbuf), &actualSize, offset);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, JumpingSumoDeviceControllerDebug_TAG, "Failed to send AddCapOffset command.");
    }

    return sentStatus;
}
    // Command class UserScript
- (BOOL)JumpingSumoDeviceController_SendUserScriptUserScriptUploaded:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock
{
    u_int8_t cmdbuf[128];
    int32_t actualSize = 0;
    eARCOMMANDS_GENERATOR_ERROR cmdError;
    BOOL sentStatus;

    // Send UserScriptUploaded command
    sentStatus = NO;
    cmdError = ARCOMMANDS_Generator_GenerateJumpingSumoDebugUserScriptUserScriptUploaded(cmdbuf, sizeof(cmdbuf), &actualSize);
    if (cmdError == ARCOMMANDS_GENERATOR_OK)
    {
        sentStatus = [self sendData:cmdbuf withSize:actualSize onBufferWithId:bufferId withSendPolicy:policy withCompletionBlock:completionBlock];
    }
    if (!sentStatus)
    {
        ARSAL_PRINT(ARSAL_PRINT_ERROR, JumpingSumoDeviceControllerDebug_TAG, "Failed to send UserScriptUploaded command.");
    }

    return sentStatus;
}
@end

#endif // ARCOMMANDS_HAS_DEBUG_COMMANDS
// END GENERATED CODE
