/*
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllerCategories.py script *
 *                                                        *
 **********************************************************/
#import <Foundation/Foundation.h>
#import <libARCommands/ARCommands.h>
#ifdef ARCOMMANDS_HAS_DEBUG_COMMANDS
#import <ARUtils/JumpingSumoDeviceController.h>
#import <ARUtils/JumpingSumoARNetworkConfig.h>

/*
 * Notification sent by the firmware after attempting to parse the user script.
 */
extern NSString *const JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotification;
extern NSString *const JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationSuccessKey; /* Whether the script was loaded successfully (0 = failed, 1 = success). */
extern NSString *const JumpingSumoDeviceControllerUserScriptStateUserScriptParsedNotificationMessageKey; /* Error message. */

@class JumpingSumoDeviceController;

@interface JumpingSumoDeviceController (libARCommandsDebug)
- (void)registerJumpingSumoDebugARCommandsCallbacks;
- (void)unregisterJumpingSumoDebugARCommandsCallbacks;
/* 
 * Ask the JS speed and turn ratio.
 */
- (BOOL)JumpingSumoDeviceController_SendJumpSetJumpMotor:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withSpeed:(int8_t)speed;
/* 
 * Change the camera vertical orientation.
 */
- (BOOL)JumpingSumoDeviceController_SendJumpSetCameraOrientation:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withSpeedIncrement:(int8_t)speedIncrement;
/* 
 * Play a sound from a file.
 */
- (BOOL)JumpingSumoDeviceController_SendAudioPlaySoundWithName:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withFilename:(char *)filename;
/* 
 * Command to create an event in colibry state machine for all kinds of debug.
 */
- (BOOL)JumpingSumoDeviceController_SendMiscDebugEvent:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
/* 
 * Play an animation.
 */
- (BOOL)JumpingSumoDeviceController_SendAnimationPlayAnimation:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withId:(eARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID)id;
/* 
 * Add the specified offset to the current cap.
 */
- (BOOL)JumpingSumoDeviceController_SendAnimationAddCapOffset:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock withOffset:(float)offset;
/* 
 * Command to notify the firmware that a new user script was uploaded.
 */
- (BOOL)JumpingSumoDeviceController_SendUserScriptUserScriptUploaded:(int)bufferId withSendPolicy:(eARNETWORK_SEND_POLICY)policy withCompletionBlock:(DeviceControllerCompletionBlock)completionBlock;
@end

#endif // ARCOMMANDS_HAS_DEBUG_COMMANDS
// END GENERATED CODE
